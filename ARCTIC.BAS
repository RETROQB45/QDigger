DECLARE SUB CHECKHISCORE (score AS LONG, gameresult%)
DECLARE SUB ADD (obj%, cx%, cy%)
DECLARE SUB ADDSCORE (amount%)
DECLARE SUB ANIMATE (p AS ANY)
DECLARE FUNCTION BOXCOLL% (x%, y%, w%, h%, ax%, ay%, aw%, ah%)
DECLARE FUNCTION CHECKBAGSHIFT% (x%, y%, dir%)
DECLARE SUB CHECKGIFT (plx%, ply%, scoreflag%)
DECLARE SUB CHECKKILL ()
DECLARE SUB CHECKNEWHISCORE (score AS LONG, gameresult%)
DECLARE SUB CHECKDECORS (plx%, ply%, scoreflag%)
DECLARE SUB CLOSELEVEL ()
DECLARE SUB COLLAPSE ()
DECLARE SUB DELAY (sec!)
DECLARE SUB DRAWHOLE (x%, y%)
DECLARE SUB DRAWIMG (x%, y%, imgn%, disablemask%)
DECLARE SUB DRAWMAP ()
DECLARE SUB DRAWPIC (x%, y%, p AS ANY, disablemask%)
DECLARE SUB ERASEIMG (x%, y%, im%)
DECLARE SUB ERASEPIC (x%, y%, p AS ANY)
DECLARE SUB FADELEVEL ()
DECLARE SUB FILLBGR (num%)
DECLARE SUB FILLMAZECELL (x%, y%, i%, l%, r%, u%, d%)
DECLARE SUB GETCELLCOORDS (x%, y%, rx%, ry%)
DECLARE SUB GETIMAGE (i%, x%, y%, idx%)
DECLARE SUB GETINPUTS ()
DECLARE FUNCTION GETLEVIDX$ (num%)
DECLARE SUB GETMAZECELL (x%, y%, rx%, ry%)
DECLARE FUNCTION GETPATH% (sx%, sy%, tx%, ty%, pl%)
DECLARE SUB GETRANDOMCELL (dx%, dy%)
DECLARE FUNCTION IMGSIZE% (w%, h%)
DECLARE SUB INIT ()
DECLARE SUB INITDIGGER ()
DECLARE SUB LOADFONT ()
DECLARE SUB LOADGRAPHICS ()
DECLARE SUB LOADIMAGE (w%, h%)
DECLARE SUB LOADLEVEL (levidx AS INTEGER)
DECLARE SUB LOADLEVIDX ()
DECLARE SUB LOADSCORES (file$, scorebuf() AS ANY)
DECLARE SUB MOVEBAGS ()
DECLARE SUB MOVEDIGGER (dx%, dy%)
DECLARE SUB MOVEENEMIES ()
DECLARE SUB MOVEEYE ()
DECLARE SUB MOVEGIFT ()
DECLARE SUB NEWGAME ()
DECLARE SUB NEXTLEVEL ()
DECLARE FUNCTION NUMTOSTR$ (n AS LONG)
DECLARE FUNCTION OPENLEVEL% (idx$)
DECLARE SUB PLAYSOUND (sndcode%)
DECLARE SUB QUIT ()
DECLARE SUB READINI ()
DECLARE FUNCTION READLEVELSTR$ ()
DECLARE SUB REDRAW (x%, y%, obj() AS ANY, objc%)
DECLARE FUNCTION RESTART% ()
DECLARE SUB RESTOREFIELD ()
DECLARE SUB RETRACE ()
DECLARE SUB SCANMAZECELL (cx%, cy%, inner%, lw%, rw%, uw%, dw%)
DECLARE SUB SCREENSHOT ()
DECLARE SUB SETPAL (palmode AS INTEGER)
DECLARE FUNCTION SHIFTBAG% (num%, dir%)
DECLARE SUB SHOOT (dx%, dy%)
DECLARE SUB SHOWHINT (col%, row%, a$)
DECLARE SUB SHOWHINTS ()
DECLARE SUB SHOWHISCORES ()
DECLARE SUB SHOWSCORE (score AS LONG, lives AS INTEGER)
DECLARE SUB SHOWTITLE ()
DECLARE FUNCTION TEVENT% (t AS ANY)
DECLARE SUB TEXTOUT (row%, col%, text$, sp%)
DECLARE SUB UPDATESCORES ()
DECLARE SUB CHECKPARTY (x%, y%, scoreflag%)
DECLARE SUB CELEBRATE ()
DEFINT A-Z

CONST PROGNAME$ = "Arctic Mine"
CONST PROGVER$ = "v1.4 beta"
CONST PROGEXE$ = "ARCTIC"
CONST GRAPHSIZE = 19800 - 1  ' max = 32767-1
CONST hiscorefile$ = "ARCTIC.SCO"

CONST lifecost = 5000
CONST inifile$ = "arctic.ini"
CONST hiscorec = 7
CONST namelen = 14

CONST FALSE = 0, TRUE = NOT FALSE, OLD = -2
CONST scrmode = 9, nopal = FALSE

TYPE SCORETYPE
	uname AS STRING * namelen
	score AS LONG
END TYPE
TYPE PICPAR
	sequence  AS INTEGER
	frame     AS INTEGER
END TYPE
TYPE TIMEINT
	starttime AS SINGLE
	interval  AS SINGLE
END TYPE
TYPE DIGGERTYPE
	x         AS INTEGER
	y         AS INTEGER
	startx    AS INTEGER
	starty    AS INTEGER
	dx        AS INTEGER
	dy        AS INTEGER
	pic       AS PICPAR
	mode      AS INTEGER
	eye       AS INTEGER
	lives     AS INTEGER
	score     AS LONG
	teye      AS TIMEINT
END TYPE
TYPE ENEMYTYPE
	x         AS INTEGER
	y         AS INTEGER
	stpx      AS INTEGER
	stpy      AS INTEGER
	trgx      AS INTEGER
	trgy      AS INTEGER
	dir       AS INTEGER
	pic       AS PICPAR
	chaseflee AS INTEGER
	mode      AS INTEGER
	thob      AS TIMEINT
	tdead     AS TIMEINT
END TYPE
TYPE NESTTYPE
	x       AS INTEGER
	y       AS INTEGER
	count   AS INTEGER
END TYPE
TYPE PICKUPTYPE
	x       AS INTEGER
	y       AS INTEGER
	mode    AS INTEGER
	pic     AS PICPAR
	use     AS INTEGER
	misc    AS INTEGER
	fally   AS INTEGER
	dx      AS INTEGER
	dy      AS INTEGER
	dir     AS INTEGER
	t       AS TIMEINT
END TYPE
TYPE PARTYTYPE
	x       AS INTEGER
	y       AS INTEGER
	use     AS INTEGER
	iwait   AS SINGLE
	ilen    AS SINGLE
	t       AS TIMEINT
END TYPE

CONST enm.creating = 1
CONST enm.nobbin = 2
CONST enm.hobbin = 3
CONST enm.falling = 4
CONST enm.dead = 5

CONST mz.filled = -1
CONST mz.empty = 0
CONST mz.half = 1
CONST mz.init = -100

CONST gr.winner = 1
CONST gr.gameover = 2
CONST gr.abort = 0

CONST newdecor = 1
CONST newbag = 2
CONST newnobbin = 4
CONST newgift = 5

CONST snd.decor = 1
CONST snd.gift = 2
CONST snd.party = 3
CONST snd.dead = 5
CONST snd.killenemy = 7
CONST snd.bagswing = 6
CONST snd.bagshift = 4
CONST snd.bagfall = 8
CONST snd.baglanding = 9
CONST snd.hit = 10
CONST snd.shoot = 11
CONST snd.dig = 12

CONST pal.normal = 0
CONST pal.party = 1

CONST diggerspeedy = 3
CONST diggerspeedx = 4
CONST dgr.left = 1
CONST dgr.right = 2
CONST dgr.up = 3
CONST dgr.down = 4
CONST dgr.dead = 5
CONST dgr.falling = 6

CONST viewx = 12, viewy = 8
CONST cellw = 15 + 5
CONST cellh = 14 + 4
CONST mazex = 15
CONST mazey = 10

CONST f.x = 10
CONST f.y = 16
CONST f.w = cellw * mazex + 20
CONST f.h = cellh * mazey + 12

CONST tim.s.eye = 5
CONST tim.s.hobbin = 3
CONST tim.s.nobbin = 15
CONST tim.d.nobbin = -1
CONST tim.d.hobbin = 1
CONST tim.min.nobbin = 7
CONST tim.max.hobbin = 7

CONST ani.stat = 0
CONST ani.bgrs = 1
CONST ani.dgrleft = 2
CONST ani.dgrright = 3
CONST ani.dgrup = 4
CONST ani.dgrdown = 5
CONST anid.withouteye = 4
CONST ani.dgrxleft = 6
CONST ani.dgrxright = 7
CONST ani.dgrxup = 8
CONST ani.dgrxdown = 9
CONST ani.dgrdie = 10
CONST ani.nobbin = 11
CONST ani.nobbindie = 12
CONST ani.hobbinleft = 13
CONST ani.hobbinright = 14
CONST ani.hobbindieleft = 15
CONST ani.hobbindieright = 16
CONST ani.decor = 17
CONST ani.bag = 19
CONST ani.bagleft = 18
CONST ani.bagright = 20
CONST ani.bagfall = 21
CONST ani.party = 22
CONST ani.coins = 23
CONST ani.expl = 24
CONST ani.fire = 25
CONST ani.dig = 26
CONST iblob.down = 79 + 6
CONST iblob.left = iblob.down - 3
CONST iblob.right = iblob.down - 2
CONST iblob.up = iblob.down - 1

CONST img1 = 0
CONST framec = 1
CONST mask = 1
CONST pic = 0

CONST opened = 0
CONST leftwall = 1
CONST rightwall = 2
CONST upperwall = 4
CONST lowerwall = 8
CONST filled = 16

CONST bagm.normal = 0
CONST bagm.swinging = 1
CONST bagm.left = 2
CONST bagm.right = 3
CONST bagm.falling = 4

CONST maxcol = 15

CONST ornw = 16, ornh = 13
CONST giftw = 17, gifth = 15
CONST imgw = 16, imgh = 16

CONST gs.play = 0
CONST gs.pause = 1
CONST gs.killed = 2
CONST gs.restart = 3
CONST gs.newgame = 10
CONST gs.quit = 100

CONST eyem.normal = 0
CONST eyem.expl = 1
CONST eyew = 8, eyeh = 8

CONST ps.brightbgr = 0
CONST ps.whitebgr = 1
CONST ps.snowing = 2

IF COMMAND$ = "/?" THEN
	PRINT "Runs "; CHR$(34); PROGNAME$; CHR$(34); " computer game."
	PRINT
	PRINT PROGEXE$ + " [{ file | /? | /I }]"
	PRINT
	PRINT "    file    use levelpack from file 'file', not built-in levels."
	PRINT "    /I      create ini-file."
	PRINT
	PRINT "System requirements: 386/486, 250k of free base RAM, EGA 256k video."
	PRINT
	END
ELSEIF UCASE$(COMMAND$) = "/I" THEN
	INPUT "Do you want sound (y/n)"; s$: s$ = LCASE$(s$)
	INPUT "Do you want RETRACE (y/n)"; v$: v$ = LCASE$(v$)
	INPUT "Which party mode do you like (B for Bright, W for White, S for Snow)"; pm$: pm$ = LEFT$(LCASE$(pm$), 1)
	INPUT "How many snow flakes do you want in decades (<=255)"; fl$: fl = VAL(fl$)
	PRINT
	OPEN "ARCTIC.INI" FOR OUTPUT AS #1
	IF s$ = "y" THEN PRINT #1, "s+ ";  ELSE PRINT #1, "s- ";
	IF v$ = "y" THEN PRINT #1, "r+ ";  ELSE PRINT #1, "r- ";
	PRINT #1, "b" + pm$ + " "; : PRINT #1, "f" + HEX$(fl);
	CLOSE #1
	PRINT "ARCTIC.INI was created. Press any key to continue."
	WHILE INKEY$ = "": WEND
	WHILE INKEY$ <> "": WEND
END IF

'$DYNAMIC
DIM SHARED font(255, 15) AS STRING * 1
DIM SHARED mapon AS INTEGER
DIM SHARED eye AS PICKUPTYPE
DIM SHARED party AS PARTYTYPE
DIM SHARED tim.hobbin AS SINGLE, tim.nobbin AS SINGLE, tim.eye AS SINGLE
DIM SHARED maze(-1 TO mazex * 2 + 1, -1 TO mazey * 2 + 1) AS INTEGER
DIM SHARED graph(GRAPHSIZE) AS INTEGER, graphindex
DIM SHARED img(90, 1) AS INTEGER, imgc
DIM SHARED anim(70, 1) AS INTEGER
DIM SHARED digger AS DIGGERTYPE
DIM SHARED enemy(1 TO 5) AS ENEMYTYPE, enemyc
DIM SHARED bag(1 TO 20) AS PICKUPTYPE, bagc
DIM SHARED gift(1 TO 20) AS PICKUPTYPE, giftc
DIM SHARED decor(1 TO 100) AS PICKUPTYPE, decorc
DIM SHARED hiscore(hiscorec - 1) AS SCORETYPE
DIM SHARED nest AS NESTTYPE
DIM SHARED levidx(1 TO 256)
DIM SHARED bgrc, curbgr, consorn, snowc, snowready
DIM SHARED curlevel, partymode, bonusscore
DIM SHARED levelpack$, nosound, partystyle
DIM SHARED noretrace, gamestate
DIM SHARED tcons AS TIMEINT
DIM SHARED shotc AS INTEGER
DIM SHARED gameresult
DIM SHARED levelpal
DIM SHARED scrbuf(32000 - 1) AS INTEGER
DIM SHARED snowbuf(1, 3) AS SINGLE

PRINT PROGNAME$ + " " + PROGVER$
PRINT LTRIM$(RTRIM$(STR$(FRE(-1)))); "K of free base memory available"
INIT
DO
	curlevel = 0
	SETPAL pal.normal
	RESTOREFIELD
	NEWGAME
	IF gameresult <> gr.abort THEN COLLAPSE
	ADDSCORE -1
	CHECKHISCORE digger.score, gameresult
LOOP UNTIL gamestate = gs.quit
QUIT


data.levidx:
DATA 01,02,03,04,05,06,07,08
DATA 06,07,08
DATA 05,06,07,08
DATA 05,06,07,08
DATA 05,06,07,08
DATA 05,06,07,08
DATA 05,06,07,08
DATA 05,06,07,08
DATA 05,06,07,08
DATA 05,06,07,08
DATA 05,06,07,-1

data.levels:

DATA "_mine #1"
DATA "_levcol 1"
DATA " :::$:::::    e"
DATA " ::77::7:: :$::"
DATA " $:77::7:: ::::"
DATA " ::77$:7$: :777"
DATA " ::77::7:: :777"
DATA "  :77::7:: :777"
DATA ": ::::$:$: ::::"
DATA ":    ::::: ::::"
DATA "7::: ::::: :::7"
DATA "77::   d   ::77"

DATA "_mine #2"
DATA "_levcol 3"
DATA "      ::$:$:: e"
DATA ":77:: ::::::: :"
DATA ":77:: :77777: :"
DATA "$77$: :77777: :"
DATA "7777: ::::::: :"
DATA "7777: :$::    :"
DATA ":77:: :77: ::::"
DATA ":$$:: 7777 :77:"
DATA "7:::: :77: :77:"
DATA "77:::  d   ::::"

DATA "_mine #3"
DATA "_levcol 11"
DATA "     $:$:$    e"
DATA "77:: :7:7: :$$:"
DATA "7::: :7:7: :77:"
DATA ":$$: :7:7: 7777"
DATA "7777 :7:7: 7777"
DATA "7777       :77:"
DATA ":77::7: :7::77:"
DATA ":77::7: :7:::::"
DATA "7::::7: :7::::7"
DATA "77:::7:d:7:::77"

DATA "_mine #4"
DATA "_levcol 24"
DATA "  $7777$7777$  "
DATA "7 ::7777777:: 7"
DATA "7   :77777:   7"
DATA "7:: ::777:: ::7"
DATA ":::   :7:   :::"
DATA "::$:: :$: ::$::"
DATA "::7:: 777 ::7::"
DATA ":777:     :777:"
DATA "77777:7 7:77777"
DATA "77777:7d7:77777"

DATA "_mine #5"
DATA "_levcol 39"
DATA "              e"
DATA " $7777$ 777777 "
DATA " 777777 :77$7: "
DATA " :7777: 77$777 "
DATA " 777777 :7777: "
DATA " :7777: $77777 "
DATA " 77$777 :7777: "
DATA " :77$7: 777777 "
DATA " 777777 777777 "
DATA "       d       "

DATA "_mine #6"
DATA "_levcol 8"
DATA "              e"
DATA " 7$77 : : 77$7 "
DATA " 777: $ $ :777 "
DATA " 777  : :  777 "
DATA " 77: :7 7: :77 "
DATA " 77  :7 7:  77 "
DATA " 7: :77 77: :7 "
DATA " 7  $77 77$  7 "
DATA " 7 7777 7777 7 "
DATA "       d       "

DATA "_mine #7"
DATA "_levcol 7"
DATA "  77777 77777 e"
DATA ": 7$7$7 7$7$7 :"
DATA "$ 77777 77777 $"
DATA "7  7777 7777  7"
DATA "77 :777 777: 77"
DATA "77   77 77   77"
DATA "7777 :7 7: 7777"
DATA "7777  : :  7777"
DATA "77777 : : 77777"
DATA "77777  d  77777"

DATA "_mine #8"
DATA "_levcol 15"
DATA "              e"
DATA " :77$77777$77: "
DATA "   7777$7777   "
DATA " $ :7777777: $ "
DATA " 7   77777   7 "
DATA " 77$ :777: $77 "
DATA " 777   7   777 "
DATA " 7777: : :7777 "
DATA " 77777 : 77777 "
DATA "       d       "

DATA "_end"

data.gfx:
'stats = 0
DATA 11
DATA 12,12
DATA "877777777888"
DATA "777777777788"
DATA "778888887788"
DATA "778888887788"
DATA "778888887788"
DATA "778888777788"
DATA "778888777788"
DATA "778888777788"
DATA "778888777788"
DATA "778888777788"
DATA "777777777788"
DATA "877777777888"
DATA 12,12
DATA "888887788888"
DATA "888887788888"
DATA "888887788888"
DATA "888887788888"
DATA "888887788888"
DATA "888877788888"
DATA "888877788888"
DATA "888877788888"
DATA "888877788888"
DATA "888877788888"
DATA "888877788888"
DATA "888877788888"
DATA 12,12
DATA "877777777888"
DATA "777777777788"
DATA "778888887788"
DATA "888888887788"
DATA "888888887788"
DATA "888888887788"
DATA "877777777788"
DATA "777777777888"
DATA "777788888888"
DATA "777788888888"
DATA "777777777788"
DATA "877777777788"
DATA 12,12
DATA "877777788888"
DATA "777777778888"
DATA "778888778888"
DATA "778888778888"
DATA "888888778888"
DATA "887777777888"
DATA "887777777788"
DATA "888888877788"
DATA "778888877788"
DATA "778888877788"
DATA "777777777788"
DATA "877777777888"
DATA 12,12
DATA "778888888888"
DATA "778888888888"
DATA "778888778888"
DATA "778888778888"
DATA "778888778888"
DATA "778888778888"
DATA "778888778888"
DATA "777777777788"
DATA "877777777788"
DATA "888887778888"
DATA "888887778888"
DATA "888887778888"
DATA 12,12
DATA "877777778888"
DATA "777777778888"
DATA "778888888888"
DATA "778888888888"
DATA "778888888888"
DATA "777777777888"
DATA "877777777788"
DATA "888888777788"
DATA "778888777788"
DATA "778888777788"
DATA "777777777788"
DATA "877777777888"
DATA 12,12
DATA "877777777888"
DATA "777777777788"
DATA "778888887788"
DATA "778888887788"
DATA "778888888888"
DATA "777777777888"
DATA "777777777788"
DATA "778888777788"
DATA "778888777788"
DATA "778888777788"
DATA "777777777788"
DATA "877777777888"
DATA 12,12
DATA "877777777888"
DATA "877777777788"
DATA "888888887788"
DATA "888888887788"
DATA "888888887788"
DATA "888888887788"
DATA "888888877788"
DATA "888888877788"
DATA "888888877788"
DATA "888888877788"
DATA "888888877788"
DATA "888888877788"
DATA 12,12
DATA "888777778888"
DATA "887777777888"
DATA "887788877888"
DATA "887788877888"
DATA "887788877888"
DATA "887777777888"
DATA "877777777788"
DATA "778888877788"
DATA "778888877788"
DATA "778888877788"
DATA "777777777788"
DATA "877777777888"
DATA 12,12
DATA "877777777888"
DATA "777777777788"
DATA "778888887788"
DATA "778888887788"
DATA "778888887788"
DATA "777777777788"
DATA "877777777788"
DATA "888888777788"
DATA "888888777788"
DATA "888888777788"
DATA "888888777788"
DATA "888888777788"
DATA 16,14
DATA "8888888888888888"
DATA "88888888FF888888"
DATA "8888888FFFF88888"
DATA "8888888F88F88888"
DATA "AAAAA8BBBBBBB888"
DATA "AAAAAABBBBBBBB88"
DATA "8888AABBBBBBBBB8"
DATA "AAAAAABBBBBBBBBB"
DATA "AAAAA8B88BBBB88B"
DATA "8888888FF8BB8FF8"
DATA "888888F88F88F88F"
DATA "888888F88F88F88F"
DATA "8888888FF8888FF8"
DATA "8888888888888888"

gfx.bgrs:
DATA 8
DATA 20,4
DATA "77FFFFFF7777FFFFFF77"
DATA "F77FFFF77FF77FFFF77F"
DATA "FF77FF77FFFF77FF77FF"
DATA "FFF7777FFFFFF7777FFF"
DATA 20,4
DATA "AA77AA77AA77AA77AA77"
DATA "7AA77AA77AA77AA77AA7"
DATA "77AA77AA77AA77AA77AA"
DATA "7AA77AA77AA77AA77AA7"
DATA 20,4
DATA "77FF77FF77FF77FF77FF"
DATA "F77FF77FF77FF77FF77F"
DATA "FF77FF77FF77FF77FF77"
DATA "7FF77FF77FF77FF77FF7"
DATA 20,4
DATA "AAFFFFFFAAAAFFFFFFAA"
DATA "FAAFFFFAAFFAAFFFFAAF"
DATA "FFAAFFAAFFFFAAFFAAFF"
DATA "FFFAAAAFFFFFFAAAAFFF"
DATA 20,4
DATA "77FFFFFF7777FFFFFF77"
DATA "FAAFFFFAAFFAAFFFFAAF"
DATA "FF77FF77FFFF77FF77FF"
DATA "FFFAAAAFFFFFFAAAAFFF"
DATA 20,4
DATA "AA77AA77AA77AA77AA77"
DATA "7AA77AA77AA77AA77AA7"
DATA "AA77AA77AA77AA77AA77"
DATA "7AA77AA77AA77AA77AA7"
DATA 20,4
DATA "77FF77FF77FF77FF77FF"
DATA "FAAFFAAFFAAFFAAFFAAF"
DATA "FFAAFFAAFFAAFFAAFFAA"
DATA "7FF77FF77FF77FF77FF7"
DATA 20,4
DATA "FF77FF77FF77FF77FF77"
DATA "7FF77FF77FF77FF77FF7"
DATA "77FF77FF77FF77FF77FF"
DATA "7FF77FF77FF77FF77FF7"

'digger: left = 2
DATA 3
DATA 17, 15
DATA "///////8888//////"
DATA "//////8FFFF8/////"
DATA "//////8F88F8/////"
DATA "//////8F88F8/////"
DATA "/8888/8F88F88////"
DATA "8AAAA8BBBBBBB8///"
DATA "8AAAAABBBBBBBB8//"
DATA "/888AABBBBBBBBB8/"
DATA "8AAAAABBBBBBB88B8"
DATA "8AAAA8B88BBB8FF8/"
DATA "/8888/8FF8B8F88F8"
DATA "/////8F88F88F88F8"
DATA "/////8F88F8/8FF8/"
DATA "//////8FF8///88//"
DATA "///////88////////"
DATA 17, 15
DATA "////////88///////"
DATA "///////8FF8//////"
DATA "//////8FFFF8/////"
DATA "/8888/8F88F8/////"
DATA "8AAAA88F88F88////"
DATA "8AAAAABBBBBBB8///"
DATA "/88AAABBBBBBBB8//"
DATA "///8AABBBBBBBBB8/"
DATA "/88AAAB88BBBBBBB8"
DATA "8AAAAA8FF88BB88B8"
DATA "8AAAA8F88F888FF8/"
DATA "/88888F88F88F88F8"
DATA "//////8FF8/8F88F8"
DATA "///////88///8FF8/"
DATA "/////////////88//"
DATA 17, 15
DATA "/////////////////"
DATA "////////88///////"
DATA "//88///8FF8//////"
DATA "/8AA8/8FFFF8/////"
DATA "/8AAA88F88F88////"
DATA "//8AAABBBBBBB8///"
DATA "///8AABBBBBBBB8//"
DATA "///8AABBBBBBBBB8/"
DATA "///8AABBBBBBB88B8"
DATA "//8AAAB88BBB8FF8/"
DATA "/8AAA88FF8B8F88F8"
DATA "/8AA88F88F88F88F8"
DATA "//88/8F88F8/8FF8/"
DATA "//////8FF8///88//"
DATA "///////88////////"

'digg6r: right = 6
DATA 3
DATA 17, 15
DATA "//////8888///////"
DATA "/////8FFFF8//////"
DATA "/////8F88F8//////"
DATA "/////8F88F8//////"
DATA "////88F88F8/8888/"
DATA "///8BBBBBBB8AAAA8"
DATA "//8BBBBBBBBAAAAA8"
DATA "/8BBBBBBBBBAA888/"
DATA "8B88BBBBBBBAAAAA8"
DATA "/8FF8BBB88B8AAAA8"
DATA "8F88F8B8FF8/8888/"
DATA "8F88F88F88F8/////"
DATA "/8FF8/8F88F8/////"
DATA "//88///8FF8//////"
DATA "////////88///////"
DATA 17, 15
DATA "///////88////////"
DATA "//////8FF8///////"
DATA "/////8FFFF8//////"
DATA "/////8F88F8//888/"
DATA "////88F88F888AAA8"
DATA "///8BBBBBBBAAAAA8"
DATA "//8BBBBBBBBAAA88/"
DATA "/8BBBBBBBBBAA8///"
DATA "8BBBBBBB88BAAA88/"
DATA "8B88BBB8FF8AAAAA8"
DATA "/8FF8B8F88F88AAA8"
DATA "8F88F88F88F8/888/"
DATA "8F88F8/8FF8//////"
DATA "/8FF8///88///////"
DATA "//88/////////////"
DATA 17, 15
DATA "/////////////////"
DATA "///////88////////"
DATA "//////8FF8///88//"
DATA "/////8FFFF8/8AA8/"
DATA "////88F88F88AAA8/"
DATA "///8BBBBBBBAAA8//"
DATA "//8BBBBBBBBAA8///"
DATA "/8BBBBBBBBBAA8///"
DATA "8B88BBBBBBBAA8///"
DATA "/8FF8BBB88BAAA8//"
DATA "8F88F8B8FF88AAA8/"
DATA "8F88F88F88F88AA8/"
DATA "/8FF8/8F88F8/88//"
DATA "//88///8FF8//////"
DATA "////////88///////"

'digg6r: up = /
DATA 3
DATA 15, 16
DATA "/////88/88//////"
DATA "////8AA8AA8/////"
DATA "////8AA8AA8/////"
DATA "////8AA8AA8/////"
DATA "//88/8AAA8//////"
DATA "/8FF8BBBBB8888//"
DATA "8F88F8BBBBFFFF8/"
DATA "8F88F8BBBB888FF8"
DATA "/8FF8BBBBB888FF8"
DATA "//888BBBBBFFFF8/"
DATA "///88BBBBB8888//"
DATA "//8FF8BBBB8/////"
DATA "/8F88F8BB8//////"
DATA "/8F88F8B8///////"
DATA "//8FF8B8////////"
DATA "///88/8/////////"
DATA 15, 16
DATA "////88///88////"
DATA "///8AA8/8AA8///"
DATA "///8AAA8AAA8///"
DATA "///8AAAAAAA8///"
DATA "///88AAAAA8////"
DATA "//8FF8BBBB888//"
DATA "/8F88F8BBBFFF8/"
DATA "/8F88F8BBB88FF8"
DATA "//8FF8BBBB88FF8"
DATA "///888BBBBFFF8/"
DATA "//888BBBBB888//"
DATA "/8FF8BBBBB8////"
DATA "8F88F8BBB8/////"
DATA "8F88F8BB8//////"
DATA "/8FF8BB8///////"
DATA "//88/88////////"
DATA 15, 16
DATA "///88/////88///"
DATA "//8AA8///8AA8//"
DATA "//8AAA888AAA8//"
DATA "///8AAAAAAA8///"
DATA "//888AAAAA8////"
DATA "/8FF8BBBBB88///"
DATA "8F88F8BBBBFF8//"
DATA "8F88F8BBBB8FF8/"
DATA "/8FF8BBBBB8FF8/"
DATA "//888BBBBBFF8//"
DATA "///88BBBBB88///"
DATA "//8FF8BBBB8////"
DATA "/8F88F8BB8/////"
DATA "/8F88F8B8//////"
DATA "//8FF8B8///////"
DATA "///88/8////////"

'digger: down = 5
DATA 3
DATA 15, 16
DATA "////////8/88///"
DATA "///////8B8FF8//"
DATA "//////8B8F88F8/"
DATA "/////8BB8F88F8/"
DATA "////8BBBB8FF8//"
DATA "/8888BBBBB88///"
DATA "8FFFFBBBBB888//"
DATA "8F888BBBBB8FF8/"
DATA "8F888BBBB8F88F8"
DATA "8FFFFBBBB8F88F8"
DATA "/8888BBBBB8FF8/"
DATA "/////8AAA8/88//"
DATA "////8AAAAA8////"
DATA "////8AA8AA8////"
DATA "////8AA8AA8////"
DATA "/////88/88/////"
DATA 15,16
DATA "////////88/88//"
DATA "///////8BB8FF8/"
DATA "//////8BB8F88F8"
DATA "/////8BBB8F88F8"
DATA "////8BBBBB8FF8/"
DATA "//888BBBBB888//"
DATA "/8FFFBBBB888///"
DATA "8FF88BBBB8FF8//"
DATA "8FF88BBB8F88F8/"
DATA "/8FFFBBB8F88F8/"
DATA "//888BBBB8FF8//"
DATA "////8AAAA888///"
DATA "///8AAA8AAA8///"
DATA "///8AA8/8AA8///"
DATA "///8AA8/8AA8///"
DATA "////88///88////"
DATA 15,16
DATA "////////8/88///"
DATA "///////8B8FF8//"
DATA "//////8B8F88F8/"
DATA "/////8BB8F88F8/"
DATA "////8BBBB8FF8//"
DATA "///88BBBBB88///"
DATA "//8FFBBBBB888//"
DATA "/8FF8BBBBB8FF8/"
DATA "/8FF8BBBB8F88F8"
DATA "//8FFBBBB8F88F8"
DATA "///88BBBBB8FF8/"
DATA "////8AAAAA888//"
DATA "///8AAAAAAA8///"
DATA "//8AAA888AAA8//"
DATA "//8AA8///8AA8//"
DATA "///88/////88///"

' digger: leftx
DATA 3
DATA 17, 15
DATA "/////////////////"
DATA "/////////////////"
DATA "////////88///////"
DATA "///////8FF8//////"
DATA "/8888/8FFFF88////"
DATA "8AAAA8BBBBBBB8///"
DATA "8AAAAABBBBBBBB8//"
DATA "/888AABBBBBBBBB8/"
DATA "8AAAAABBBBBBB88B8"
DATA "8AAAA8B88BBB8FF8/"
DATA "/8888/8FF8B8F88F8"
DATA "/////8F88F88F88F8"
DATA "/////8F88F8/8FF8/"
DATA "//////8FF8///88//"
DATA "///////88////////"
DATA 17, 15
DATA "/////////////////"
DATA "/////////////////"
DATA "////////88///////"
DATA "/8888//8FF8//////"
DATA "8AAAA88FFFF88////"
DATA "8AAAAABBBBBBB8///"
DATA "/88AAABBBBBBBB8//"
DATA "///8AABBBBBBBBB8/"
DATA "/88AAAB88BBBBBBB8"
DATA "8AAAAA8FF88BB88B8"
DATA "8AAAA8F88F888FF8/"
DATA "/88888F88F88F88F8"
DATA "//////8FF8/8F88F8"
DATA "///////88///8FF8/"
DATA "/////////////88//"
DATA 17, 15
DATA "/////////////////"
DATA "/////////////////"
DATA "//88////88///////"
DATA "/8AA8//8FF8//////"
DATA "/8AAA88FFFF88////"
DATA "//8AAABBBBBBB8///"
DATA "///8AABBBBBBBB8//"
DATA "///8AABBBBBBBBB8/"
DATA "///8AABBBBBBB88B8"
DATA "//8AAAB88BBB8FF8/"
DATA "/8AAA88FF8B8F88F8"
DATA "/8AA88F88F88F88F8"
DATA "//88/8F88F8/8FF8/"
DATA "//////8FF8///88//"
DATA "///////88////////"

'digger: rightx
DATA 3
DATA 17, 15
DATA "/////////////////"
DATA "/////////////////"
DATA "///////88////////"
DATA "//////8FF8///////"
DATA "////88FFFF8/8888/"
DATA "///8BBBBBBB8AAAA8"
DATA "//8BBBBBBBBAAAAA8"
DATA "/8BBBBBBBBBAA888/"
DATA "8B88BBBBBBBAAAAA8"
DATA "/8FF8BBB88B8AAAA8"
DATA "8F88F8B8FF8/8888/"
DATA "8F88F88F88F8/////"
DATA "/8FF8/8F88F8/////"
DATA "//88///8FF8//////"
DATA "////////88///////"
DATA 17, 15
DATA "/////////////////"
DATA "/////////////////"
DATA "///////88////////"
DATA "//////8FF8///888/"
DATA "////88FFFF888AAA8"
DATA "///8BBBBBBBAAAAA8"
DATA "//8BBBBBBBBAAA88/"
DATA "/8BBBBBBBBBAA8///"
DATA "8BBBBBBB88BAAA88/"
DATA "8B88BBB8FF8AAAAA8"
DATA "/8FF8B8F88F88AAA8"
DATA "8F88F88F88F8/888/"
DATA "8F88F8/8FF8//////"
DATA "/8FF8///88///////"
DATA "//88/////////////"
DATA 17, 15
DATA "/////////////////"
DATA "/////////////////"
DATA "///////88////88//"
DATA "//////8FF8//8AA8/"
DATA "////88FFFF88AAA8/"
DATA "///8BBBBBBBAAA8//"
DATA "//8BBBBBBBBAA8///"
DATA "/8BBBBBBBBBAA8///"
DATA "8B88BBBBBBBAA8///"
DATA "/8FF8BBB88BAAA8//"
DATA "8F88F8B8FF88AAA8/"
DATA "8F88F88F88F88AA8/"
DATA "/8FF8/8F88F8/88//"
DATA "//88///8FF8//////"
DATA "////////88///////"

'digger: upx
DATA 3
DATA 15, 16
DATA "/////88/88/////"
DATA "////8AA8AA8////"
DATA "////8AA8AA8////"
DATA "////8AA8AA8////"
DATA "//88/8AAA8/////"
DATA "/8FF8BBBBB8////"
DATA "8F88F8BBBBF8///"
DATA "8F88F8BBBBFF8//"
DATA "/8FF8BBBBBFF8//"
DATA "//888BBBBBF8///"
DATA "///88BBBBB8////"
DATA "//8FF8BBBB8////"
DATA "/8F88F8BB8/////"
DATA "/8F88F8B8//////"
DATA "//8FF888///////"
DATA "///88//////////"
DATA 15, 16
DATA "////88///88////"
DATA "///8AA8/8AA8///"
DATA "///8AAA8AAA8///"
DATA "///8AAAAAAA8///"
DATA "///88AAAAA8////"
DATA "//8FF8BBBB8////"
DATA "/8F88F8BBBF8///"
DATA "/8F88F8BBBFF8//"
DATA "//8FF8BBBBFF8//"
DATA "///888BBBBF8///"
DATA "//888BBBBB8////"
DATA "/8FF8BBBBB8////"
DATA "8F88F8BBB8/////"
DATA "8F88F8BB8//////"
DATA "/8FF8BB8///////"
DATA "//88/88////////"
DATA 15, 16
DATA "///88/////88///"
DATA "//8AA8///8AA8//"
DATA "//8AAA888AAA8//"
DATA "///8AAAAAAA8///"
DATA "//888AAAAA8////"
DATA "/8FF8BBBBB8////"
DATA "8F88F8BBBBF8///"
DATA "8F88F8BBBBFF8//"
DATA "/8FF8BBBBBFF8//"
DATA "//888BBBBBF8///"
DATA "///88BBBBB8////"
DATA "//8FF8BBBB8////"
DATA "/8F88F8BB8/////"
DATA "/8F88F8B8//////"
DATA "//8FF8B8///////"
DATA "///88/8////////"

'digger: downx
DATA 3
DATA 15, 16
DATA "////////8/88///"
DATA "///////8B8FF8//"
DATA "//////8B8F88F8/"
DATA "/////8BB8F88F8/"
DATA "////8BBBB8FF8//"
DATA "////8BBBBB88///"
DATA "///8FBBBBB888//"
DATA "//8FFBBBBB8FF8/"
DATA "//8FFBBBB8F88F8"
DATA "///8FBBBB8F88F8"
DATA "////8BBBBB8FF8/"
DATA "/////8AAA8/88//"
DATA "////8AAAAA8////"
DATA "////8AA8AA8////"
DATA "////8AA8AA8////"
DATA "/////88/88/////"
DATA 15, 16
DATA "////////88/88//"
DATA "///////8BB8FF8/"
DATA "//////8BB8F88F8"
DATA "/////8BBB8F88F8"
DATA "////8BBBBB8FF8/"
DATA "////8BBBBB888//"
DATA "///8FBBBB888///"
DATA "//8FFBBBB8FF8//"
DATA "//8FFBBB8F88F8/"
DATA "///8FBBB8F88F8/"
DATA "////8BBBB8FF8//"
DATA "////8AAAA888///"
DATA "///8AAA8AAA8///"
DATA "///8AA8/8AA8///"
DATA "///8AA8/8AA8///"
DATA "////88///88////"
DATA 15, 16
DATA "////////8/88///"
DATA "///////8B8FF8//"
DATA "//////8B8F88F8/"
DATA "/////8BB8F88F8/"
DATA "////8BBBB8FF8//"
DATA "////8BBBBB88///"
DATA "///8FBBBBB888//"
DATA "//8FFBBBBB8FF8/"
DATA "//8FFBBBB8F88F8"
DATA "///8FBBBB8F88F8"
DATA "////8BBBBB8FF8/"
DATA "////8AAAAA888//"
DATA "///8AAAAAAA8///"
DATA "//8AAA888AAA8//"
DATA "//8AA8///8AA8//"
DATA "///88/////88///"

'digger: die
DATA 6
DATA 17, 15
DATA "///////88////88//"
DATA "//////8FF8//8FF8/"
DATA "/////8FF8F88FFFF8"
DATA "//8888FFFF88FF8F8"
DATA "/8AAA88FF8BB8FF8/"
DATA "8AAAAAB88BBBB88B8"
DATA "8A88AABBBBBBBBB8/"
DATA "/8AAAABBBBBBBB8//"
DATA "8AAAA8BBBBBBB8///"
DATA "8A888/8F88FF8////"
DATA "/8////88F8F88////"
DATA "//////8F88FF8////"
DATA "///////8FFFF8////"
DATA "////////8FF8/////"
DATA "/////////88//////"
DATA 16, 15
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "//////888///////"
DATA "////8877788/////"
DATA "//8877FFF7788///"
DATA "/877FFFFFFF778//"
DATA "/87FFFFFFFFF78//"
DATA "888888888888888/"
DATA 16,15
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "//////888///////"
DATA "////8877788/////"
DATA "//8877FFF7788///"
DATA "/877FFFFFFF778//"
DATA "/87FFFFFFFFF78//"
DATA "878888FFFFFFF78/"
DATA "878FF8F8FFFFF78/"
DATA "888888888888888/"
DATA 16,15
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "//////888///////"
DATA "////8877788/////"
DATA "//8877FFF7788///"
DATA "/877FFFFFFF778//"
DATA "/87FFFFFFFFF78//"
DATA "878888FFFFFFF78/"
DATA "878FF8F8FFFFF78/"
DATA "878888F8F888878/"
DATA "8788FFF8F8FF878/"
DATA "888888888888888/"
DATA 16,15
DATA "////////////////"
DATA "////////////////"
DATA "//////888///////"
DATA "////8877788/////"
DATA "//8877FFF7788///"
DATA "/877FFFFFFF778//"
DATA "/87FFFFFFFFF78//"
DATA "878888FFFFFFF78/"
DATA "878FF8F8FFFFF78/"
DATA "878888F8F888878/"
DATA "8788FFF8F8FF878/"
DATA "878F8FF8F888878/"
DATA "878FF8F8F8FFF78/"
DATA "87FFFFF8F8FFF78/"
DATA "888888888888888/"
DATA 16,15
DATA "//////888///////"
DATA "////8877788/////"
DATA "//8877FFF7788///"
DATA "/877FFFFFFF778//"
DATA "/87FFFFFFFFF78//"
DATA "878888FFFFFFF78/"
DATA "878FF8F8FFFFF78/"
DATA "878888F8F888878/"
DATA "8788FFF8F8FF878/"
DATA "878F8FF8F888878/"
DATA "878FF8F8F8FFF78/"
DATA "87FFFFF8F8FFF78/"
DATA "87FFFFFFF8FFF78/"
DATA "87FFFFFFFFFFF78/"
DATA "888888888888888/"

'nobbin: walk
DATA 3
DATA 16,15
DATA "///888////888///"
DATA "//8FFF8888FFF8//"
DATA "/8FFFFF99FFFFF8/"
DATA "/8F88FF99F88FF8/"
DATA "/8F88FF99F88FF8/"
DATA "//8FFF9999FFF8//"
DATA "///8999999998///"
DATA "///8899999988///"
DATA "//8EE898898EE8//"
DATA "/8EE88999988EE8/"
DATA "/8EE8/8998/8EE8/"
DATA "/8EE8//88/8EEEE8"
DATA "/8EE8////8EEEEE8"
DATA "8EEEE8////888888"
DATA "8888888/////////"
DATA 16,15
DATA "///888////888///"
DATA "//8FFF8888FFF8//"
DATA "/8FFFFF99FFFFF8/"
DATA "/8FF88F99FF88F8/"
DATA "/8FF88F99FF88F8/"
DATA "//8FFF9999FFF8//"
DATA "///8999999998///"
DATA "///8899889988///"
DATA "//8EE898898EE8//"
DATA "/8EE88999988EE8/"
DATA "/8EE8/8998/8EE8/"
DATA "/8EE8//88//8EE8/"
DATA "8EEEE/////8EEEE8"
DATA "8EEEEE///8EEEEE8"
DATA "888888////888888"
DATA 16,15
DATA "///888////888///"
DATA "//8FFF8888FFF8//"
DATA "/8FF88F99FF88F8/"
DATA "/8FF88F99FF88F8/"
DATA "/8FFFFF99FFFFF8/"
DATA "//8FFF9999FFF8//"
DATA "///8999889998///"
DATA "///8899889988///"
DATA "//8EE898898EE8//"
DATA "/8EE88988988EE8/"
DATA "/8EE8/8998/8EE8/"
DATA "8EEEE8/88//8EE8/"
DATA "8EEEEE8////8EE8/"
DATA "888888////8EEEE8"
DATA "/////////8888888"

'nobbin: die
DATA 1
DATA 16,15
DATA "////////////////"
DATA "////////////////"
DATA "///888////888///"
DATA "//8FFF8888FFF8//"
DATA "/8F88FF99FF88F8/"
DATA "/8F88FF99FF88F8/"
DATA "/8FFFFF99FFFFF8/"
DATA "//8FFF9999FFF8//"
DATA "///8999889998///"
DATA "///8899889988///"
DATA "//8EE898898EE8//"
DATA "/8EE88988988EE8/"
DATA "8EEEE889988EEEE8"
DATA "8EEEEE8888EEEEE8"
DATA "888888////888888"

'hobbin: left
DATA 3
DATA 16,16
DATA "/////8888888////"
DATA "////898FFF898///"
DATA "///898FFFFF898//"
DATA "///898FF88F8998/"
DATA "//8998FF88F89998"
DATA "/899998FFF899998"
DATA "8999999888999998"
DATA "/8EEEEE99999998/"
DATA "//88888E999998//"
DATA "/8EEEEE999998///"
DATA "//8999999998////"
DATA "///8888EE88/////"
DATA "//////8EE8//////"
DATA "//////8EE8//////"
DATA "/////8EEEE8/////"
DATA "////88888888////"
DATA 16,16
DATA "/////8888888////"
DATA "////898FFF898///"
DATA "///898FFFFF898//"
DATA "//8998F88FF8998/"
DATA "/89998F88FF89998"
DATA "8999998FFF899998"
DATA "8EEE999888999998"
DATA "/888EEE99999998/"
DATA "////888E999998//"
DATA "//888EE999998///"
DATA "/8EEE9999998////"
DATA "//99988EE88/////"
DATA "///88/8EE8//////"
DATA "/////8EEEE8/////"
DATA "////8EEEEEE8////"
DATA "/////888888/////"
DATA 16,16
DATA "/////8888888////"
DATA "////898FFF898///"
DATA "///898F88FF898//"
DATA "//8998F88FF8998/"
DATA "/89998FFFFF89998"
DATA "8EE9998FFF899998"
DATA "/88EE99888999998"
DATA "///88EE99999998/"
DATA "////888E999998//"
DATA "//888EE999998///"
DATA "//8EE9999998////"
DATA "//E9988EE88/////"
DATA "///888EEEE8/////"
DATA "////8EEEEEE8////"
DATA "/////888888/////"
DATA "////////////////"

'hobbin: right
DATA 3
DATA 16,16
DATA "////8888888/////"
DATA "///898FFF898////"
DATA "//898FFFFF898///"
DATA "/8998F88FF898///"
DATA "89998F88FF8998//"
DATA "899998FFF899998/"
DATA "8999998889999998"
DATA "/89999999EEEEE8/"
DATA "//899999E88888//"
DATA "///899999EEEEE8/"
DATA "////8999999998//"
DATA "/////88EE8888///"
DATA "//////8EE8//////"
DATA "//////8EE8//////"
DATA "/////8EEEE8/////"
DATA "////88888888////"
DATA 16,16
DATA "////8888888/////"
DATA "///898FFF898////"
DATA "//898FFFFF898///"
DATA "/8998FF88F8998//"
DATA "89998FF88F89998/"
DATA "899998FFF8999998"
DATA "899999888999EEE8"
DATA "/89999999EEE888/"
DATA "//899999E888////"
DATA "///899999EE888//"
DATA "////8999999EEE8/"
DATA "/////88EE889998/"
DATA "//////8EE8/888//"
DATA "/////8EEEE8/////"
DATA "////8EEEEEE8////"
DATA "/////888888/////"
DATA 16,16
DATA "////8888888/////"
DATA "///898FFF898////"
DATA "//898FF88F898///"
DATA "/8998FF88F8998//"
DATA "89998FFFFF89998/"
DATA "899998FFF8999EE8"
DATA "89999988899EE88/"
DATA "/89999999EE88///"
DATA "//899999E88/////"
DATA "///899999EE88///"
DATA "////8999999EE88/"
DATA "/////88EE8899E8/"
DATA "/////8EEEE8888//"
DATA "////8EEEEEE8////"
DATA "/////888888/////"
DATA "////////////////"

'hobbin: dieleft
DATA 1
DATA 16,14
DATA "/////8888888////"
DATA "////898FFF898///"
DATA "///898F88FF898//"
DATA "//8998F88FF8998/"
DATA "/89998FFFFF89998"
DATA "8EE9998FFF899998"
DATA "/88EE99888999998"
DATA "///88EE99999998/"
DATA "///88EEE999998//"
DATA "/88EEE9999998///"
DATA "8EEE99999998////"
DATA "/88888EEEE8/////"
DATA "////8EEEEEE8////"
DATA "/////888888/////"

'hobbin: dieright
DATA 1
DATA 16,15
DATA "////////////////"
DATA "////8888888/////"
DATA "///898FFF898////"
DATA "//898FF88F898///"
DATA "/8998FF88F8998//"
DATA "89998FFFFF89998/"
DATA "899998FFF8999EE8"
DATA "89999988899EE88/"
DATA "/89999999EE88///"
DATA "//899999EEE88///"
DATA "///8999999EEE88/"
DATA "////89999999EEE8"
DATA "/////8EEEE88888/"
DATA "////8EEEEEE8////"
DATA "/////888888/////"

' decorent
gfx.decorent:
DATA 7
DATA 14,13
DATA"//////88//////"
DATA"/////8EE8/////"
DATA"/////8FF8/////"
DATA"////8FFFF8////"
DATA"//88FFFFFF88//"
DATA"/8FFFFFFFFFF8/"
DATA"89FFFFFFFFFFF8"
DATA"89FF99FFF9FFF8"
DATA"8999999F999F98"
DATA"89919999999998"
DATA"/899119999998/"
DATA"//8899999988//"
DATA"////888888////"
DATA 14,13
DATA"//////88//////"
DATA"/////8EE8/////"
DATA"/////8FF8/////"
DATA"////8FFFF8////"
DATA"//88FFFFFF88//"
DATA"/8FFFFFFFFFF8/"
DATA"8AFFFFFFFFFFF8"
DATA"8AFFAAFFFAFFF8"
DATA"8AAAAAAFAAAFA8"
DATA"8AA2AAAAAAAAA8"
DATA"/8AA22AAAAAA8/"
DATA"//88AAAAAA88//"
DATA"////888888////"
DATA 14,13
DATA"//////88//////"
DATA"/////8EE8/////"
DATA"/////8FF8/////"
DATA"////8FFFF8////"
DATA"//88FFFFFF88//"
DATA"/8FFFFFFFFFF8/"
DATA"8BFFFFFFFFFFF8"
DATA"8BFFBBFFFBFFF8"
DATA"8BBBBBBFBBBFB8"
DATA"8BB3BBBBBBBBB8"
DATA"/8BB33BBBBBB8/"
DATA"//88BBBBBB88//"
DATA"////888888////"
DATA 14,13
DATA"//////88//////"
DATA"/////8EE8/////"
DATA"/////8FF8/////"
DATA"////8FFFF8////"
DATA"//88FFFFFF88//"
DATA"/8FFFFFFFFFF8/"
DATA"8CFFFFFFFFFFF8"
DATA"8CFFCCFFFCFFF8"
DATA"8CCCCCCFCCCFC8"
DATA"8CC4CCCCCCCCC8"
DATA"/8CC44CCCCCC8/"
DATA"//88CCCCCC88//"
DATA"////888888////"
DATA 14,13
DATA"//////88//////"
DATA"/////8EE8/////"
DATA"/////8FF8/////"
DATA"////8FFFF8////"
DATA"//88FFFFFF88//"
DATA"/8FFFFFFFFFF8/"
DATA"8DFFFFFFFFFFF8"
DATA"8DFFDDFFFDFFF8"
DATA"8DDDDDDFDDDFD8"
DATA"8DD5DDDDDDDDD8"
DATA"/8DD55DDDDDD8/"
DATA"//88DDDDDD88//"
DATA"////888888////"
DATA 14,13
DATA"//////88//////"
DATA"/////8EE8/////"
DATA"/////8FF8/////"
DATA"////8FFFF8////"
DATA"//88FFFFFF88//"
DATA"/8FFFFFFFFFF8/"
DATA"8EFFFFFFFFFFF8"
DATA"8EFFEEFFFEFFF8"
DATA"8EEEEEEFEEEFE8"
DATA"8EE6EEEEEEEEE8"
DATA"/8EE66EEEEEE8/"
DATA"//88EEEEEE88//"
DATA"////888888////"
DATA 14,13
DATA"//////88//////"
DATA"/////8EE8/////"
DATA"/////8FF8/////"
DATA"////8FFFF8////"
DATA"//88FFFFFF88//"
DATA"/8FFFFFFFFFF8/"
DATA"87FFFFFFFFFFF8"
DATA"87FF77FFF7FFF8"
DATA"8777777F777F78"
DATA"87717777777778"
DATA"/877117777778/"
DATA"//8877777788//"
DATA"////888888////"

' giftbag: moveleft
DATA 1
DATA 16,15
DATA "/////8888///////"
DATA "////866668//////"
DATA "/////8668///////"
DATA "////8666688/////"
DATA "///866666668////"
DATA "//86FF66FF668///"
DATA "/866FF66FF6668//"
DATA "866F66FF66F6668/"
DATA "86FFFFFFFFFF668/"
DATA "866F66FF66F6668/"
DATA "8666FF66FF66668/"
DATA "8666FF66FF6668//"
DATA "/866666666668///"
DATA "//8866666688////"
DATA "////888888//////"

' giftbag: normal
DATA 1
DATA 16,15
DATA "/////888888/////"
DATA "/////866668/////"
DATA "//////8668//////"
DATA "////88666688////"
DATA "///8666666668///"
DATA "//866FF66FF668//"
DATA "/8666FF66FF6668/"
DATA "8666F66FF66F6668"
DATA "866FFFFFFFFFF668"
DATA "8666F66FF66F6668"
DATA "86666FF66FF66668"
DATA "86666FF66FF66668"
DATA "/86666666666668/"
DATA "//886666666688//"
DATA "////88888888////"

'giftbag: moveright
DATA 1
DATA 16,15
DATA "///////8888/////"
DATA "//////866668////"
DATA "//////88668/////"
DATA "/////8666668////"
DATA "////866666668///"
DATA "///866FF66FF68//"
DATA "//8666FF66FF668/"
DATA "/8666F66FF66F668"
DATA "/866FFFFFFFFFF68"
DATA "/8666F66FF66F668"
DATA "/86666FF66FF6668"
DATA "//8666FF66FF668/"
DATA "///86666666668//"
DATA "////886666688///"
DATA "//////88888/////"


'giftbag: fall
DATA 1
DATA 16,15
DATA "/////868868/////"
DATA "//////8668//////"
DATA "//////8668//////"
DATA "/////866668/////"
DATA "////86666668////"
DATA "///86FF66FF68///"
DATA "//866FF66FF668//"
DATA "/866F66FF66F668/"
DATA "/86FFFFFFFFFF68/"
DATA "/866F66FF66F668/"
DATA "/8666FF66FF6668/"
DATA "//866FF66FF668//"
DATA "///8666666668///"
DATA "////88666688////"
DATA "//////8888//////"

' fir-tree
DATA 1
DATA 16,15
DATA "///////8////////"
DATA "//////8F8///////"
DATA "/////8E2F8//////"
DATA "////8F22928/////"
DATA "/////8AF28//////"
DATA "////8D2E2F8/////"
DATA "///82F92FD28////"
DATA "//82CF2A22CF8///"
DATA "///88222FA88////"
DATA "///8A2E22228////"
DATA "//8F2F2FC2F28///"
DATA "/8D22C222D29F8//"
DATA "8F29F22AF2E22A8/"
DATA "/8888844488888//"
DATA "//////888///////"

' gifts from bag
DATA 3
DATA 16,15
DATA "//////8/////////"
DATA "/////8F8C///////"
DATA "////8FFFCC//////"
DATA "///8FCFCF8///8//"
DATA "//8FFFCFFF8/8F8/"
DATA "/8/8FCFCF8/8BFF8"
DATA "8D8/8FFF8/8B9B8/"
DATA "DFF888F888B9B88/"
DATA "8FDD8E8E8FFB8FF8"
DATA "/8DF8EEE88F82FF8"
DATA "//8F8FFF88822228"
DATA "/8FDD88F88FF2FF8"
DATA "/8888778/8FF2FF8"
DATA "8FF77778//88888/"
DATA "/888888/////////"
DATA 16,15
DATA "////////////////"
DATA "////////88//////"
DATA "//////88CC8/////"
DATA "/////8FFCF8/////"
DATA "/////8FFCFF8////"
DATA "////8CCFCFF8////"
DATA "////8FFCCCC8////"
DATA "////8FFCFF88888/"
DATA "//8/888CFF8228F8"
DATA "/8D88EE888F88FF8"
DATA "8DFF8EEE888B9B88"
DATA "/8FDDFFF8FF9B828"
DATA "/888888F88F88FF8"
DATA "8FF77778/88F2FF8"
DATA "/888888///88888/"
DATA 16,15
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "////////////////"
DATA "///////888//////"
DATA "/////88CCC88////"
DATA "/////8FFCFF8////"
DATA "/////8FFCFF88///"
DATA "//8//8CCCCC82888"
DATA "/8D888FFCFF82FF8"
DATA "8DFF88FFCFF82FF8"
DATA "/8FDD88888888888"
DATA "/8888EEE8B9B9BF8"
DATA "8FF78FFF8B9B9BF8"
DATA "/888888888888888"

' explosion
DATA 3
DATA 8,7
DATA "D6////FE"
DATA "6FE6FE6D"
DATA "/D6EE6D/"
DATA "//6E6E//"
DATA "/D6FE6D/"
DATA "D6E6FE6D"
DATA "ED////FE"
DATA 8,7
DATA "6D////D6"
DATA "FE6//6FE"
DATA "/6E//E6/"
DATA "//D//D//"
DATA "/DE//ED/"
DATA "FE6//6EF"
DATA "6D////D6"
DATA 8,7
DATA "ED////6E"
DATA "6F6//6EF"
DATA "/E////D/"
DATA "////////"
DATA "/F////6/"
DATA "D6E//EFD"
DATA "ED////DE"

' fire
DATA 3
DATA 8,7
DATA "//D66D//"
DATA "/E6DE66/"
DATA "D6E66D6D"
DATA "66D666E6"
DATA "D66D666D"
DATA "/6D66D6/"
DATA "//D6E6//"
DATA 8,7
DATA "//E6E///"
DATA "/66DEE6/"
DATA "DDEE6DE/"
DATA "66D6E6EE"
DATA "EE6DED6E"
DATA "/ED6EED/"
DATA "//E6ED//"
DATA 8,7
DATA "//EEDE//"
DATA "/ED6EED/"
DATA "EDEEEDEE"
DATA "E6D6EEED"
DATA "DEEEE6EE"
DATA "/6D6EED/"
DATA "//EEED//"

' digleft
DATA 1
DATA 8,18
DATA "//////00"
DATA "////0000"
DATA "///00000"
DATA "//000000"
DATA "//000000"
DATA "/0000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "/0000000"
DATA "//000000"
DATA "//000000"
DATA "///00000"
DATA "/////00/"
DATA "////00//"

' digright
DATA 1
DATA 8,18
DATA "//00////"
DATA "0000////"
DATA "00000///"
DATA "000000//"
DATA "000000//"
DATA "0000000/"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "0000000/"
DATA "000000//"
DATA "00000///"
DATA "00000///"
DATA "/00/////"
DATA "00//////"

' digup
DATA 1
DATA 24,6
DATA "/////////000000/////////"
DATA "///////0000000000///////"
DATA "//////0000000000000/////"
DATA "///000000000000000000///"
DATA "//000000000000000000////"
DATA "////000000000000000000//"

' digdown
DATA 1
DATA 24,6
DATA "///000000000000000000///"
DATA "//000000000000000000////"
DATA "////000000000000000000//"
DATA "/////00000000000000/////"
DATA "///////0000000000///////"
DATA "/////////000000/////////"

gfx.font8x16:
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,126,129,165,129,129,189,153,129,126,0,0,0,0,0
DATA 0,0,126,255,219,255,255,195,231,255,126,0,0,0,0,0
DATA 0,0,0,54,127,127,127,127,62,28,8,0,0,0,0,0
DATA 0,0,0,8,28,62,127,62,28,8,0,0,0,0,0,0
DATA 0,0,24,60,60,231,231,231,24,24,60,0,0,0,0,0
DATA 0,0,24,60,126,255,255,126,24,24,60,0,0,0,0,0
DATA 0,0,0,0,0,24,60,60,24,0,0,0,0,0,0,0
DATA 255,255,255,255,255,231,195,195,231,255,255,255,255,255,0,0
DATA 0,0,0,0,60,102,66,66,102,60,0,0,0,0,0,0
DATA 255,255,255,255,195,153,189,189,153,195,255,255,255,255,0,0
DATA 0,0,15,7,13,25,60,102,102,102,60,0,0,0,0,0
DATA 0,0,60,102,102,102,60,24,126,24,24,0,0,0,0,0
DATA 0,0,63,51,63,48,48,48,112,240,224,0,0,0,0,0
DATA 0,0,127,99,127,99,99,99,103,231,230,192,0,0,0,0
DATA 0,0,24,24,219,60,231,60,219,24,24,0,0,0,0,0
DATA 0,128,192,224,240,248,254,248,240,224,192,128,0,0,0,0
DATA 0,2,6,14,30,62,254,62,30,14,6,2,0,0,0,0
DATA 0,0,24,60,126,24,24,24,126,60,24,0,0,0,0,0
DATA 0,0,102,102,102,102,102,102,102,0,102,102,0,0,0,0
DATA 0,0,127,219,219,219,123,27,27,27,27,27,0,0,0,0
DATA 0,124,198,96,56,108,198,198,108,56,12,198,124,0,0,0
DATA 0,0,0,0,0,0,0,0,254,254,254,254,0,0,0,0
DATA 0,0,24,60,126,24,24,24,126,60,24,126,0,0,0,0
DATA 0,0,24,60,126,24,24,24,24,24,24,24,0,0,0,0
DATA 0,0,24,24,24,24,24,24,24,126,60,24,0,0,0,0
DATA 0,0,0,0,0,24,12,254,12,24,0,0,0,0,0,0
DATA 0,0,0,0,0,48,96,254,96,48,0,0,0,0,0,0
DATA 0,0,0,0,0,0,192,192,192,254,0,0,0,0,0,0
DATA 0,0,0,0,0,36,102,255,102,36,0,0,0,0,0,0
DATA 0,0,0,0,16,56,56,124,124,254,254,0,0,0,0,0
DATA 0,0,0,0,254,254,124,124,56,56,16,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,24,60,60,60,24,24,0,24,24,0,0,0,0,0
DATA 0,99,99,99,34,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,54,54,127,54,54,54,127,54,54,0,0,0,0,0
DATA 12,12,62,99,97,96,62,3,67,99,62,12,12,0,0,0
DATA 0,0,0,0,97,99,6,12,24,51,99,0,0,0,0,0
DATA 0,0,28,54,54,28,59,110,102,102,59,0,0,0,0,0
DATA 0,48,48,48,96,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,12,24,48,48,48,48,48,24,12,0,0,0,0,0
DATA 0,0,24,12,6,6,6,6,6,12,24,0,0,0,0,0
DATA 0,0,0,0,102,60,255,60,102,0,0,0,0,0,0,0
DATA 0,0,0,24,24,24,255,24,24,24,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,24,24,24,48,0,0,0,0
DATA 0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,24,24,0,0,0,0,0
DATA 0,0,1,3,6,12,24,48,96,192,128,0,0,0,0,0
DATA 0,0,126,231,231,239,247,231,231,231,126,0,0,0,0,0
DATA 0,0,28,60,60,28,28,28,28,28,62,0,0,0,0,0
DATA 0,0,126,239,239,239,15,126,224,255,255,0,0,0,0,0
DATA 0,0,126,247,247,7,127,7,247,247,126,0,0,0,0,0
DATA 0,0,15,15,47,111,255,15,15,15,15,0,0,0,0,0
DATA 0,0,255,239,231,248,15,239,239,239,126,0,0,0,0,0
DATA 0,0,126,239,239,224,254,239,239,239,126,0,0,0,0,0
DATA 0,0,255,239,239,15,15,31,62,124,248,0,0,0,0,0
DATA 0,0,126,231,231,231,126,231,231,231,126,0,0,0,0,0
DATA 0,0,126,239,239,239,127,15,239,239,126,0,0,0,0,0
DATA 0,0,0,24,24,0,0,0,24,24,0,0,0,0,0,0
DATA 0,0,0,24,24,0,0,0,24,24,48,0,0,0,0,0
DATA 0,0,6,12,24,48,96,48,24,12,6,0,0,0,0,0
DATA 0,0,0,0,0,126,0,0,126,0,0,0,0,0,0,0
DATA 0,0,96,48,24,12,6,12,24,48,96,0,0,0,0,0
DATA 0,0,62,99,99,6,12,12,0,12,12,0,0,0,0,0
DATA 0,0,62,99,99,111,111,111,110,96,62,0,0,0,0,0
DATA 0,0,126,247,247,7,127,247,247,247,127,0,0,0,0,0
DATA 0,0,254,239,239,238,252,238,239,239,254,0,0,0,0,0
DATA 0,0,126,239,239,239,224,239,239,239,126,0,0,0,0,0
DATA 0,0,254,239,239,239,239,239,239,239,254,0,0,0,0,0
DATA 0,0,126,247,247,255,240,247,247,247,126,0,0,0,0,0
DATA 0,0,126,247,247,247,240,255,240,240,240,0,0,0,0,0
DATA 0,0,126,247,247,247,240,247,247,247,127,0,0,0,0,0
DATA 0,0,231,231,231,231,255,231,231,231,231,0,0,0,0,0
DATA 0,0,60,60,60,60,60,60,60,60,60,0,0,0,0,0
DATA 0,0,15,15,15,15,15,239,239,239,126,0,0,0,0,0
DATA 0,0,247,247,247,247,254,247,247,247,247,0,0,0,0,0
DATA 0,0,240,240,240,240,240,240,247,247,247,0,0,0,0,0
DATA 0,0,254,219,219,219,219,219,219,219,219,0,0,0,0,0
DATA 0,0,254,239,239,239,239,239,239,239,239,0,0,0,0,0
DATA 0,0,126,231,231,231,231,231,231,231,126,0,0,0,0,0
DATA 0,0,254,251,251,251,254,240,240,240,240,0,0,0,0,0
DATA 0,0,126,231,231,231,231,231,231,231,127,0,0,0,0,0
DATA 0,0,254,239,239,239,254,239,239,239,239,0,0,0,0,0
DATA 0,0,126,247,247,240,255,7,247,247,126,0,0,0,0,0
DATA 0,0,240,255,240,240,240,247,247,247,126,0,0,0,0,0
DATA 0,0,247,247,247,247,247,247,247,247,126,0,0,0,0,0
DATA 0,0,247,247,247,247,247,247,247,118,60,0,0,0,0,0
DATA 0,0,219,219,219,219,219,219,219,219,126,0,0,0,0,0
DATA 0,0,247,247,119,55,126,236,238,239,239,0,0,0,0,0
DATA 0,0,239,239,239,127,15,239,239,239,126,0,0,0,0,0
DATA 0,0,255,247,239,222,189,123,247,239,255,0,0,0,0,0
DATA 0,0,60,48,48,48,48,48,48,48,60,0,0,0,0,0
DATA 0,0,64,96,112,56,28,14,7,3,1,0,0,0,0,0
DATA 0,0,60,12,12,12,12,12,12,12,60,0,0,0,0,0
DATA 8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0
DATA 24,24,12,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,62,111,15,63,111,63,0,0,0,0,0
DATA 0,0,112,112,112,126,123,123,123,123,126,0,0,0,0,0
DATA 0,0,0,0,0,62,123,120,123,123,62,0,0,0,0,0
DATA 0,0,7,7,7,63,111,111,111,111,63,0,0,0,0,0
DATA 0,0,0,0,0,62,123,127,120,123,62,0,0,0,0,0
DATA 0,0,62,123,123,120,127,120,120,120,120,0,0,0,0,0
DATA 0,0,0,0,0,62,119,119,119,63,7,119,119,62,0,0
DATA 0,0,112,112,112,126,119,119,119,119,119,0,0,0,0,0
DATA 0,0,28,28,0,28,28,28,28,28,28,0,0,0,0,0
DATA 0,0,7,7,0,7,7,7,7,7,119,119,119,62,0,0
DATA 0,0,112,112,112,119,119,126,119,119,119,0,0,0,0,0
DATA 0,0,56,56,56,56,56,56,56,56,56,0,0,0,0,0
DATA 0,0,0,0,0,254,219,219,219,219,219,0,0,0,0,0
DATA 0,0,0,0,0,126,119,119,119,119,119,0,0,0,0,0
DATA 0,0,0,0,0,62,119,119,119,119,62,0,0,0,0,0
DATA 0,0,0,0,0,126,123,123,123,123,126,112,112,112,0,0
DATA 0,0,0,0,0,63,111,111,111,111,63,7,7,7,0,0
DATA 0,0,0,0,0,126,119,119,112,112,112,0,0,0,0,0
DATA 0,0,0,0,0,62,96,127,3,123,62,0,0,0,0,0
DATA 0,0,56,56,56,127,56,59,59,63,30,0,0,0,0,0
DATA 0,0,0,0,0,119,119,119,119,119,63,0,0,0,0,0
DATA 0,0,0,0,0,119,119,119,119,54,28,0,0,0,0,0
DATA 0,0,0,0,0,219,219,219,219,219,126,0,0,0,0,0
DATA 0,0,0,0,0,251,251,31,248,239,239,0,0,0,0,0
DATA 0,0,0,0,0,119,119,119,63,7,119,119,119,62,0,0
DATA 0,0,0,0,0,127,111,94,61,123,127,0,0,0,0,0
DATA 0,0,14,24,24,24,112,24,24,24,14,0,0,0,0,0
DATA 0,0,24,24,24,24,0,24,24,24,24,0,0,0,0,0
DATA 0,0,112,24,24,24,28,24,24,24,112,0,0,0,0,0
DATA 0,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,8,28,54,99,99,127,0,0,0,0,0,0
DATA 0,0,30,51,97,96,96,97,51,30,6,3,62,0,0,0
DATA 0,0,102,102,0,102,102,102,102,102,59,0,0,0,0,0
DATA 0,6,12,24,0,62,99,127,96,99,62,0,0,0,0,0
DATA 0,8,28,54,0,60,6,62,102,102,59,0,0,0,0,0
DATA 0,0,102,102,0,60,6,62,102,102,59,0,0,0,0,0
DATA 0,48,24,12,0,60,6,62,102,102,59,0,0,0,0,0
DATA 0,28,54,28,0,60,6,62,102,102,59,0,0,0,0,0
DATA 0,0,0,0,60,102,96,102,60,12,6,60,0,0,0,0
DATA 0,8,28,54,0,62,99,127,96,99,62,0,0,0,0,0
DATA 0,0,102,102,0,62,99,127,96,99,62,0,0,0,0,0
DATA 0,48,24,12,0,62,99,127,96,99,62,0,0,0,0,0
DATA 0,0,102,102,0,56,24,24,24,24,60,0,0,0,0,0
DATA 0,24,60,102,0,56,24,24,24,24,60,0,0,0,0,0
DATA 0,96,48,24,0,56,24,24,24,24,60,0,0,0,0,0
DATA 0,99,99,8,28,54,99,99,127,99,99,0,0,0,0,0
DATA 28,54,28,0,28,54,99,99,127,99,99,0,0,0,0,0
DATA 12,24,48,0,127,51,48,62,48,51,127,0,0,0,0,0
DATA 0,0,0,0,110,59,27,126,216,220,119,0,0,0,0,0
DATA 0,0,31,54,102,102,127,102,102,102,103,0,0,0,0,0
DATA 0,8,28,54,0,62,99,99,99,99,62,0,0,0,0,0
DATA 0,0,99,99,0,62,99,99,99,99,62,0,0,0,0,0
DATA 0,48,24,12,0,62,99,99,99,99,62,0,0,0,0,0
DATA 0,24,60,102,0,102,102,102,102,102,59,0,0,0,0,0
DATA 0,48,24,12,0,102,102,102,102,102,59,0,0,0,0,0
DATA 0,0,99,99,0,99,99,99,99,63,3,6,60,0,0,0
DATA 0,99,99,28,54,99,99,99,99,54,28,0,0,0,0,0
DATA 0,99,99,0,99,99,99,99,99,99,62,0,0,0,0,0
DATA 0,24,24,126,195,192,192,195,126,24,24,0,0,0,0,0
DATA 0,28,54,50,48,120,48,48,48,115,126,0,0,0,0,0
DATA 0,0,195,102,60,24,255,24,255,24,24,0,0,0,0,0
DATA 0,252,102,102,124,98,102,111,102,102,243,0,0,0,0,0
DATA 0,14,27,24,24,24,126,24,24,24,24,216,112,0,0,0
DATA 0,12,24,48,0,60,6,62,102,102,59,0,0,0,0,0
DATA 0,12,24,48,0,56,24,24,24,24,60,0,0,0,0,0
DATA 0,12,24,48,0,62,99,99,99,99,62,0,0,0,0,0
DATA 0,12,24,48,0,102,102,102,102,102,59,0,0,0,0,0
DATA 0,0,59,110,0,110,51,51,51,51,51,0,0,0,0,0
DATA 59,110,0,99,115,123,127,111,103,99,99,0,0,0,0,0
DATA 0,60,108,108,62,0,126,0,0,0,0,0,0,0,0,0
DATA 0,56,108,108,56,0,124,0,0,0,0,0,0,0,0,0
DATA 0,0,24,24,0,24,24,48,99,99,62,0,0,0,0,0
DATA 0,0,0,0,0,0,127,96,96,96,0,0,0,0,0,0
DATA 0,0,0,0,0,0,127,3,3,3,0,0,0,0,0,0
DATA 0,96,224,99,102,108,24,48,110,195,6,12,31,0,0,0
DATA 0,96,224,99,102,108,24,51,103,207,31,3,3,0,0,0
DATA 0,0,24,24,0,24,24,60,60,60,24,0,0,0,0,0
DATA 0,0,0,0,27,54,108,54,27,0,0,0,0,0,0,0
DATA 0,0,0,0,108,54,27,54,108,0,0,0,0,0,0,0
DATA 130,16,130,16,130,16,130,16,130,16,130,16,130,16,130,16
DATA 195,24,195,24,195,24,195,24,195,24,195,24,195,24,195,24
DATA 216,131,218,19,216,131,218,19,216,131,218,19,216,131,218,19
DATA 24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
DATA 24,24,24,24,24,24,24,248,24,24,24,24,24,24,24,24
DATA 24,24,24,24,24,248,24,248,24,24,24,24,24,24,24,24
DATA 54,54,54,54,54,54,54,246,54,54,54,54,54,54,54,54
DATA 0,0,0,0,0,0,0,254,54,54,54,54,54,54,54,54
DATA 0,0,0,0,0,248,24,248,24,24,24,24,24,24,24,24
DATA 54,54,54,54,54,246,6,246,54,54,54,54,54,54,54,54
DATA 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
DATA 0,0,0,0,0,254,6,246,54,54,54,54,54,54,54,54
DATA 54,54,54,54,54,246,6,254,0,0,0,0,0,0,0,0
DATA 54,54,54,54,54,54,54,254,0,0,0,0,0,0,0,0
DATA 24,24,24,24,24,248,24,248,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,248,24,24,24,24,24,24,24,24
DATA 24,24,24,24,24,24,24,31,0,0,0,0,0,0,0,0
DATA 24,24,24,24,24,24,24,255,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,255,24,24,24,24,24,24,24,24
DATA 24,24,24,24,24,24,24,31,24,24,24,24,24,24,24,24
DATA 0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0
DATA 24,24,24,24,24,24,24,255,24,24,24,24,24,24,24,24
DATA 24,24,24,24,24,31,24,31,24,24,24,24,24,24,24,24
DATA 54,54,54,54,54,54,54,55,54,54,54,54,54,54,54,54
DATA 54,54,54,54,54,55,48,63,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,63,48,55,54,54,54,54,54,54,54,54
DATA 54,54,54,54,54,247,0,255,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,255,0,247,54,54,54,54,54,54,54,54
DATA 54,54,54,54,54,55,48,55,54,54,54,54,54,54,54,54
DATA 0,0,0,0,0,255,0,255,0,0,0,0,0,0,0,0
DATA 54,54,54,54,54,247,0,247,54,54,54,54,54,54,54,54
DATA 24,24,24,24,24,255,0,255,0,0,0,0,0,0,0,0
DATA 54,54,54,54,54,54,54,255,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,255,0,255,24,24,24,24,24,24,24,24
DATA 0,0,0,0,0,0,0,255,54,54,54,54,54,54,54,54
DATA 54,54,54,54,54,54,54,63,0,0,0,0,0,0,0,0
DATA 24,24,24,24,24,31,24,31,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,31,24,31,24,24,24,24,24,24,24,24
DATA 0,0,0,0,0,0,0,63,54,54,54,54,54,54,54,54
DATA 54,54,54,54,54,54,54,255,54,54,54,54,54,54,54,54
DATA 24,24,24,24,24,255,24,255,24,24,24,24,24,24,24,24
DATA 24,24,24,24,24,24,24,248,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,31,24,24,24,24,24,24,24,24
DATA 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
DATA 0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255
DATA 240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240
DATA 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
DATA 255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,59,110,108,108,110,59,0,0,0,0,0
DATA 0,0,0,0,62,99,126,99,99,126,96,96,32,0,0,0
DATA 0,0,127,99,99,96,96,96,96,96,96,0,0,0,0,0
DATA 0,0,0,0,127,54,54,54,54,54,54,0,0,0,0,0
DATA 0,0,127,99,48,24,12,24,48,99,127,0,0,0,0,0
DATA 0,0,0,0,0,63,108,108,108,108,56,0,0,0,0,0
DATA 0,0,0,0,51,51,51,51,62,48,48,96,0,0,0,0
DATA 0,0,0,0,59,110,12,12,12,12,12,0,0,0,0,0
DATA 0,0,126,24,60,102,102,102,60,24,126,0,0,0,0,0
DATA 0,0,28,54,99,99,127,99,99,54,28,0,0,0,0,0
DATA 0,0,28,54,99,99,99,54,54,54,119,0,0,0,0,0
DATA 0,0,30,48,24,12,62,102,102,102,60,0,0,0,0,0
DATA 0,0,0,0,0,126,219,219,126,0,0,0,0,0,0,0
DATA 0,0,3,6,126,219,219,243,126,96,192,0,0,0,0,0
DATA 0,0,28,48,96,96,124,96,96,48,28,0,0,0,0,0
DATA 0,0,0,62,99,99,99,99,99,99,99,0,0,0,0,0
DATA 0,0,0,127,0,0,127,0,0,127,0,0,0,0,0,0
DATA 0,0,24,24,24,255,24,24,24,0,255,0,0,0,0,0
DATA 0,0,48,24,12,6,12,24,48,0,126,0,0,0,0,0
DATA 0,0,12,24,48,96,48,24,12,0,126,0,0,0,0,0
DATA 0,0,14,27,27,24,24,24,24,24,24,24,24,24,0,0
DATA 24,24,24,24,24,24,24,24,216,216,112,0,0,0,0,0
DATA 0,0,24,24,0,0,255,0,0,24,24,0,0,0,0,0
DATA 0,0,0,0,59,110,0,59,110,0,0,0,0,0,0,0
DATA 0,56,108,108,56,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,24,24,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0
DATA 0,15,12,12,12,12,12,236,108,60,28,0,0,0,0,0
DATA 0,216,108,108,108,108,108,0,0,0,0,0,0,0,0,0
DATA 0,112,216,48,96,200,248,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,62,62,62,62,62,62,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

REM $STATIC
SUB ADD (obj, cx, cy)
	GETCELLCOORDS cx, cy, x, y
	SELECT CASE obj
		CASE newnobbin
			enemyc = enemyc + 1
			enemy(enemyc).x = x
			enemy(enemyc).y = y
			enemy(enemyc).stpx = x
			enemy(enemyc).stpy = y
			enemy(enemyc).trgx = cx
			enemy(enemyc).trgy = cy
			enemy(enemyc).mode = enm.nobbin
			enemy(enemyc).thob.starttime = TIMER
			enemy(enemyc).thob.interval = tim.nobbin
			enemy(enemyc).pic.sequence = ani.nobbin
			enemy(enemyc).pic.frame = 0
		CASE newdecor
			decorc = decorc + 1
			decor(decorc).x = x
			decor(decorc).y = y + 1
			decor(decorc).use = TRUE
			decor(decorc).mode = 0
			decor(decorc).pic.sequence = ani.decor
			decor(decorc).pic.frame = INT(RND * anim(ani.decor, framec))
			DRAWPIC decor(decorc).x, decor(decorc).y, decor(decorc).pic, FALSE
		CASE newbag
			bagc = bagc + 1
			bag(bagc).x = x
			bag(bagc).y = y
			bag(bagc).mode = gld.normal
			bag(bagc).use = TRUE
			bag(bagc).misc = 0
			bag(bagc).fally = 0
			bag(bagc).pic.sequence = ani.bag
			DRAWPIC x, y, bag(bagc).pic, FALSE
		CASE newgift
			giftc = giftc + 1
			gift(giftc).x = x
			gift(giftc).y = y
			gift(giftc).pic.sequence = ani.coins
			gift(giftc).pic.frame = -1
			gift(giftc).t.interval = 10
			gift(giftc).t.starttime = TIMER
	END SELECT
END SUB

SUB ADDSCORE (amount)
STATIC addition AS LONG
STATIC t AS TIMEINT
STATIC newlife AS LONG
STATIC palflag
	t.interval = .01
	IF amount < 0 THEN
		digger.score = digger.score + addition
		SHOWSCORE digger.score, digger.lives
		addition = 0
		EXIT SUB
	END IF
	addition = addition + amount
	IF TEVENT(t) THEN
		IF digger.score = 0 THEN newlife = lifecost
		IF palflag >= 1 THEN
			palflag = palflag - 1
			IF palflag = 0 THEN
				IF partymode THEN SETPAL pal.party ELSE SETPAL pal.normal
			END IF
		END IF
		IF digger.score + addition >= newlife THEN
			PALETTE 0, 63 ' snow-white
			palflag = 3
			newlife = newlife + lifecost
			IF digger.lives < 9 THEN digger.lives = digger.lives + 1
		END IF
		FOR i = 1 TO addition \ 5 + 1
			IF addition <= 0 THEN EXIT FOR
			addition = addition - 1
			digger.score = digger.score + 1
		NEXT
	END IF
END SUB

SUB ANIMATE (p AS PICPAR)
	p.frame = (p.frame + 1) MOD anim(p.sequence, framec)
END SUB

FUNCTION BOXCOLL (x, y, w, h, ax, ay, aw, ah)
	x2 = x + w - 1
	y2 = y + h - 1
	ax2 = ax + aw - 1
	ay2 = ay + ah - 1
	IF x > ax THEN xr1 = x ELSE xr1 = ax
	IF y > ay THEN yr1 = y ELSE yr1 = ay
	IF x2 < ax2 THEN xr2 = x2 ELSE xr2 = ax2
	IF y2 < ay2 THEN yr2 = y2 ELSE yr2 = ay2
	IF xr2 - xr1 < 0 OR yr2 - yr1 < 0 THEN BOXCOLL = FALSE ELSE BOXCOLL = TRUE
END FUNCTION

SUB CELEBRATE STATIC
STATIC initflag, n, wind
STATIC ts AS TIMEINT
CONST x = 1, y = 2, v = 3
	ts.interval = .045
	SELECT CASE partystyle
		CASE ps.whitebgr, ps.brightbgr
			IF partymode = TRUE THEN
				s! = (party.t.interval - (TIMER - party.t.starttime)) * 2
				IF s! < 9 AND ABS(INT(s!) - s!) < .2 THEN SETPAL s! MOD 2
			END IF
		CASE ps.snowing
			IF snowready = FALSE THEN
				IF partymode = FALSE THEN EXIT SUB
				REDIM snowbuf(0 TO snowc, 1 TO 3) AS SINGLE
				snowready = TRUE
				h = 1
				FOR i = 0 TO snowc
					GOSUB newflake
				NEXT
			ELSE
				IF NOT TEVENT(ts) THEN EXIT SUB
				IF INT(RND * 200) = 10 THEN wind = RND * 1 - .5
				h = 10
				FOR i = 0 TO snowc
					IF snowbuf(i, v) = TRUE THEN
						IF POINT(snowbuf(i, x), snowbuf(i, y)) = 15 THEN
							PSET (snowbuf(i, x), snowbuf(i, y)), 0
						END IF
					END IF
					snowbuf(i, x) = snowbuf(i, x) + RND * 4 - 2 + wind
					snowbuf(i, y) = snowbuf(i, y) + RND * 2 + .5
					IF snowbuf(i, x) > f.w OR snowbuf(i, x) < 0 OR snowbuf(i, y) > f.h THEN
						IF (party.t.interval + party.t.starttime - TIMER) > 7 THEN GOSUB newflake
					END IF
					IF partymode = TRUE AND POINT(snowbuf(i, x), snowbuf(i, y)) = 0 THEN
						PSET (snowbuf(i, x), snowbuf(i, y)), 15
						snowbuf(i, v) = TRUE
					ELSE
						snowbuf(i, v) = FALSE
					END IF
				NEXT
				snowready = partymode
				IF snowready = FALSE THEN ERASE snowbuf
			END IF
	END SELECT
	EXIT SUB
newflake:
	snowbuf(i, x) = RND * f.w
	snowbuf(i, y) = RND * f.h / h
	snowbuf(i, v) = FALSE
RETURN
END SUB

FUNCTION CHECKBAGSHIFT (x, y, dir)
	FOR i = 1 TO bagc
		IF BOXCOLL(x + dir, y, imgw, imgh, bag(i).x, bag(i).y, cellw - 1, cellh) THEN
			IF bag(i).mode = bagm.normal AND dir <> 0 THEN r = SHIFTBAG(i, dir * diggerspeedx)
			CHECKBAGSHIFT = TRUE
			EXIT FUNCTION
		END IF
	NEXT
	CHECKBAGSHIFT = FALSE
END FUNCTION

SUB CHECKDECORS (plx, ply, scoreflag)
	FOR i = decorc TO 1 STEP -1
		IF decor(i).use AND BOXCOLL(plx, ply, imgw, imgh, decor(i).x, decor(i).y, ornw, ornh) THEN
			IF scoreflag THEN
				ADDSCORE 25
				consorn = consorn + 1
				tcons.starttime = TIMER
				IF consorn = 8 THEN ADDSCORE 250: consorn = 0
				PLAYSOUND snd.decor
			END IF
			ERASEPIC decor(i).x, decor(i).y, decor(i).pic
			REDRAW decor(i).x, decor(i).y, bag(), bagc
			REDRAW decor(i).x, decor(i).y, gift(), giftc
			SWAP decor(decorc), decor(i)
			decorc = decorc - 1
		END IF
	NEXT
END SUB

SUB CHECKGIFT (plx, ply, scoreflag)
	FOR i = giftc TO 1 STEP -1
		IF BOXCOLL(plx, ply, imgw + 2, imgh + 2, gift(i).x, gift(i).y + imgh * .4, imgw + 3, imgh * (1 - .4)) THEN
			IF scoreflag THEN ADDSCORE 500
			PLAYSOUND snd.gift
			ERASEPIC gift(i).x, gift(i).y, gift(i).pic
			REDRAW gift(i).x, gift(i).y, bag(), bagc
			REDRAW gift(i).x, gift(i).y, decor(), decorc
			SWAP gift(giftc), gift(i)
			giftc = giftc - 1
		END IF
	NEXT
END SUB

SUB CHECKHISCORE (score AS LONG, gameresult)
	IF score > hiscore(hiscorec - 1).score THEN
		FOR i = 0 TO hiscorec - 1
			IF hiscore(i).score < score THEN
				FOR j = hiscorec - 1 TO i + 1 STEP -1
					hiscore(j) = hiscore(j - 1)
				NEXT
				hiscore(i).score = score
				VIEW
				cw = 8: ch = 14
				LINE (cw * 10 + 2, ch * 4)-STEP(cw * 22 + 1, ch * 6 + 1), 8, BF
				IF gameresult = gr.gameover THEN
					COLOR 1
					TEXTOUT 6, 12, "   GAME OVER!   ", -2
				ELSEIF gameresult = gr.winner THEN
					COLOR 13
					TEXTOUT 6, 12, "CONGRATULATIONS!", -2
				ELSE
					COLOR 7
					TEXTOUT 6, 12, "  HIGH SCORE!!  ", -2
				END IF
				COLOR 7
				LINE (cw * 10 + 2 + 2, ch * 4 + 2)-STEP(cw * 22 - 3, ch * 6 - 3), , B
				TEXTOUT 8, 12, "Enter your name:", -2
				TEXTOUT 9, 13, STRING$(namelen, "."), -2
				DO
					DO: K$ = INKEY$: LOOP WHILE LEN(K$) = 0
					SELECT CASE ASC(K$)
						CASE IS >= 32: IF LEN(name$) < namelen THEN name$ = name$ + K$
						CASE 8: IF LEN(name$) > 0 THEN name$ = LEFT$(name$, LEN(name$) - 1)
					END SELECT
					TEXTOUT 9, 13, name$ + STRING$(namelen - LEN(name$), "."), -2
				LOOP UNTIL K$ = CHR$(13)
				hiscore(i).uname = name$ + SPACE$(namelen - LEN(name$))
				UPDATESCORES
				EXIT FOR
			END IF
		NEXT
	END IF
END SUB

SUB CHECKKILL
CONST d = 2
	FOR i = enemyc TO 1 STEP -1
		IF (enemy(i).mode = enm.hobbin OR enemy(i).mode = enm.nobbin) AND BOXCOLL(enemy(i).x + d, enemy(i).y + d, imgw - d * 2, imgh - d * 2, digger.x, digger.y, imgw, imgh) THEN
			IF NOT partymode THEN
				gamestate = gs.killed
				FOR j = 1 TO enemyc
					ERASEPIC enemy(j).x - 1, enemy(j).y, enemy(j).pic
				NEXT
				ERASEPIC digger.x, digger.y, digger.pic
				digger.pic.sequence = ani.dgrdie
				digger.pic.frame = -1
				digger.mode = dgr.dead
				PLAYSOUND snd.dead
				EXIT FOR
			ELSE
				ERASEPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic
				SWAP enemy(i), enemy(enemyc)
				enemyc = enemyc - 1
				bonusscore = bonusscore + 250
				ADDSCORE bonusscore
			END IF
		END IF
	NEXT
END SUB

SUB CHECKPARTY (x, y, scoreflag)
	IF party.use THEN
		bx = party.x
		by = party.y
		IF BOXCOLL(x, y, imgw, imgh, bx, by, imgw, imgh) THEN
			ERASEIMG bx, by, anim(ani.party, img1)
			REDRAW bx, by, bag(), bagc
			REDRAW bx, by, decor(), decorc
			REDRAW bx, by, gift(), giftc
			partymode = TRUE
			snowready = FALSE
			party.use = FALSE
			party.t.starttime = TIMER
			IF scoreflag THEN ADDSCORE 1000
			SETPAL pal.party
		ELSE
			DRAWIMG bx, by, anim(ani.party, img1), TRUE
		END IF
	END IF
END SUB

SUB CLOSELEVEL
	IF levelpack$ <> "" THEN CLOSE #1
END SUB

SUB COLLAPSE
CONST y = 1, c = 2, x = 3
CONST count = 5, skip = 3
DIM p(319, 1 TO count, 1 TO 3)
DIM c(319)
DIM h(319)
DIM t(319)

	FOR i = 0 TO 319
		h(i) = 190
		t(i) = 191
		c(i) = 0
	NEXT

	DO
		done = TRUE
		FOR i = 0 TO 319
			IF h(i) >= 0 THEN
				IF c(i) < count AND RND * 10 < 8 THEN
					FOR j = 1 TO skip - 1
						PSET (i, h(i)), 0
						h(i) = h(i) - 1
					NEXT
					DO WHILE POINT(i, h(i)) = 0: h(i) = h(i) - 1: LOOP
					IF h(i) >= 0 THEN
						c(i) = c(i) + 1
						p(i, c(i), y) = h(i)
						p(i, c(i), c) = POINT(i, h(i))
						p(i, c(i), x) = i
					END IF
				END IF
				done = FALSE
			END IF
			IF c(i) <> 0 THEN done = FALSE
			FOR j = c(i) TO 1 STEP -1
				a = LEN(INKEY$)
				newy = p(i, j, y) + RND * 4 + 1
				x1 = p(i, j, x)
			 
				IF newy >= t(x1) THEN
					IF p(i, j, y) < t(x1) THEN PSET (x1, p(i, j, y)), 0
					IF x1 > 0 AND x1 < 319 THEN
						newv = (t(x1 - 1) + t(x1 + 1)) / 2
						IF newv > t(x1) THEN t(x1) = newv
						t(x1) = t(x1) - 1
					END IF
					PSET (x1, t(x1)), p(i, j, c)
					SWAP p(i, c(i), y), p(i, j, y)
					SWAP p(i, c(i), c), p(i, j, c)
					SWAP p(i, c(i), x), p(i, j, x)
					c(i) = c(i) - 1
				ELSE
					PSET (x1, p(i, j, y)), 0
					p(i, j, x) = x1 + RND * 4 - 2
					IF p(i, j, x) < 0 THEN p(i, j, x) = 0
					IF p(i, j, x) > 319 THEN p(i, j, x) = 319
					p(i, j, y) = newy
					PSET (p(i, j, x), p(i, j, y)), p(i, j, c)
				END IF
			NEXT
		NEXT
	LOOP UNTIL done
END SUB

SUB DELAY (sec!)
	ct! = TIMER
	DO UNTIL ct! + sec! <= TIMER OR ABS(ct! - TIMER) > 1000: a = LEN(INKEY$): LOOP
END SUB

SUB DRAWHOLE (x, y)
	SCANMAZECELL x, y, 0, l, r, u, d
	SCANMAZECELL x + 1, y, rc, 0, 0, 0, 0
	SCANMAZECELL x - 1, y, lc, 0, 0, 0, 0
	SCANMAZECELL x, y + 1, dc, 0, 0, 0, 0
	SCANMAZECELL x, y - 1, uc, 0, 0, 0, 0
	GETCELLCOORDS x, y, cx, cy
	IF l = FALSE OR (x = 0 AND (y = 0 OR y = mazey - 1 OR r = FALSE)) THEN
		FOR i = cx - 5 TO cx + 10 STEP diggerspeedx
			DRAWIMG i, cy - 1, iblob.left, FALSE
		NEXT
	END IF
	IF r = FALSE OR (x = mazex - 1 AND (y = 0 OR y = mazey - 1 OR l = FALSE)) THEN
		IF lc = mz.empty THEN delta = 1 ELSE delta = 0
		FOR i = cx + 10 + 1 - diggerspeedx * (3 + delta) TO cx + 10 + 1 STEP diggerspeedx
			DRAWIMG i, cy - 1, iblob.right, FALSE
		NEXT
	END IF
	IF u = FALSE OR (y = 0 AND (x = mazex - 1 OR x = 0)) THEN
		IF uc = FALSE THEN delta = 1 ELSE delta = 0
		FOR i = cy - 3 - diggerspeedy * delta TO cy - 3 + diggerspeedy * 4 STEP diggerspeedy
			DRAWIMG cx - 5, i, iblob.up, FALSE
		NEXT
	END IF
	IF d = FALSE OR (y = 0 AND (x = mazex - 1 OR x = 0)) THEN
		IF dc = mz.empty AND u = FALSE THEN delta = 1 ELSE delta = 0
		FOR i = cy + 12 - diggerspeedy * (4) TO cy + 12 + diggerspeedy * delta STEP diggerspeedy
			DRAWIMG cx - 5, i, iblob.down, FALSE
		NEXT
	END IF
END SUB

SUB DRAWIMG (x, y, imgn, disablemask)
	IF NOT disablemask THEN PUT (x, y), graph(img(imgn, mask)), AND
	PUT (x, y), graph(img(imgn, pic)), OR
END SUB

SUB DRAWMAP
CONST cw = 3, ch = 3
CONST mvx = 639 - mazex * cw, mvy = 349 - mazey * ch
	VIEW (mvx, mvy)-(mvx + mazex * cw, mvy + mazey * ch)
	FOR i = 0 TO mazex - 1
		FOR j = 0 TO mazey - 1
			SCANMAZECELL i, j, inner, lw, rw, uw, dw
			SELECT CASE inner
				CASE mz.filled: col = 1
				CASE mz.half: col = 13
				CASE mz.empty: col = 8
			END SELECT
			LINE (i * cw + 1, j * ch + 1)-STEP(cw - 2, ch - 2), col, B
			IF uw THEN col = 9 ELSE col = 8
			LINE (i * cw, j * ch)-STEP(cw, 0), col
			IF dw THEN col = 9 ELSE col = 8
			LINE (i * cw, j * ch + ch)-STEP(cw, 0), col
			IF lw THEN col = 9 ELSE col = 8
			LINE (i * cw, j * ch)-STEP(0, ch), col
			IF rw THEN col = 9 ELSE col = 8
			LINE (i * cw + cw, j * ch)-STEP(0, ch), col
		NEXT
	NEXT
	RESTOREFIELD
END SUB

SUB DRAWPIC (x, y, p AS PICPAR, disablemask)
	IF p.frame >= 0 THEN DRAWIMG x, y, anim(p.sequence, img1) + p.frame, disablemask
END SUB

SUB ERASEIMG (x, y, im)
	PUT (x, y), graph(img(im, mask)), AND
END SUB

SUB ERASEPIC (x, y, p AS PICPAR)
	ERASEIMG x, y, anim(p.sequence, img1) + p.frame
END SUB

SUB FADELEVEL
DIM s AS SINGLE
STATIC speed AS SINGLE
CONST w = 16
	IF speed = 0 THEN
		btime# = TIMER
		DO
			speed = speed + 1
			FOR s = 1 TO 100: NEXT
			n = (n + 1) MOD 100
			IF n = 0 THEN IF TIMER - btime# >= .1 THEN EXIT DO
		LOOP
		EXIT SUB
	END IF
	SELECT CASE INT(RND * 20)
		CASE IS < 5
			siz = IMGSIZE(f.w, f.h)
			DIM bb(siz)
			DIM bb2(siz)
			FOR i = f.w / w - 1 TO 0 STEP -1
				SCREEN , , 1, 0
				GET (0, 0)-STEP(f.w - i * w - 1, f.h - 1), bb
				SCREEN , , 0, 0
				GET (w - 1, 0)-STEP(i * w, f.h - 1), bb2
				RETRACE
				PUT (0, 0), bb2, PSET
				PUT (i * w, 0), bb, PSET
				FOR s = 1 TO speed / (f.w / w): FOR z! = 1 TO 10: NEXT: NEXT
			NEXT
		CASE ELSE
			siz = IMGSIZE(w, f.h)
			DIM bb(siz)
			FOR i = f.w / w - 1 TO 0 STEP -1
				SCREEN , , 1, 0
				GET (i * w, 0)-STEP(w - 1, f.h - 1), bb
				SCREEN , , 0, 0
				RETRACE
				PUT (i * w, 0), bb, PSET
				LINE (i * w - 1, 0)-STEP(0, f.h), 8
				FOR s = 1 TO speed / (f.w / w): FOR z! = 1 TO 10: NEXT: NEXT
			NEXT
	END SELECT
	SCREEN , , 1, 0
	CLS
	SCREEN 9, 1, 0, 0
	SCREEN 9
END SUB

SUB FILLBGR (num)
	n = anim(ani.bgrs, img1) + num
	GETIMAGE n, w, h, idx
	FOR y = 0 TO f.h - 1 STEP h
		FOR x = 0 TO f.w - 1 STEP w
			PUT (x, y), graph(idx), PSET
		NEXT
	NEXT
END SUB

SUB FILLMAZECELL (x, y, i, l, r, u, d)
	IF x < 0 OR y < 0 OR x > mazex - 1 OR y > mazey - 1 THEN EXIT SUB
	x2 = x * 2
	y2 = y * 2
	IF i <> OLD THEN
		SELECT CASE i
			CASE mz.init:   maze(x2, y2) = mz.filled
			CASE mz.filled: IF maze(x2, y2) <> mz.empty AND maze(x2, y2) <> mz.half THEN maze(x2, y2) = i
			CASE mz.half:   IF maze(x2, y2) <> mz.empty THEN maze(x2, y2) = i
			CASE mz.empty:  maze(x2, y2) = i
		END SELECT
	END IF
	IF l <> OLD THEN
		IF x2 <> 0 THEN maze(x2 - 1, y2) = l ELSE maze(x2 - 1, y2) = TRUE
	END IF
	IF r <> OLD THEN
		IF x2 <> (mazex - 1) * 2 THEN maze(x2 + 1, y2) = r ELSE maze(x2 + 1, y2) = TRUE
	END IF
	IF u <> OLD THEN
		IF y2 <> 0 THEN maze(x2, y2 - 1) = u ELSE maze(x2, y2 - 1) = TRUE
	END IF
	IF d <> OLD THEN
		IF y2 <> (mazey - 1) * 2 THEN maze(x2, y2 + 1) = d ELSE maze(x2, y2 + 1) = TRUE
	END IF
	IF mapon THEN DRAWMAP
END SUB

SUB GETCELLCOORDS (x, y, rx, ry)
	rx = x * cellw + viewx
	ry = y * cellh + viewy
END SUB

SUB GETIMAGE (i, x, y, idx)
	idx = img(i, pic)
	DEF SEG = VARSEG(graph(idx))
	x = PEEK(VARPTR(graph(idx)))
	y = PEEK(VARPTR(graph(idx)) + 2)
	DEF SEG
END SUB

SUB GETINPUTS
STATIC cheat$, i$
STATIC tch AS TIMEINT
STATIC tctl AS TIMEINT
DIM intenemy(6) AS DOUBLE
DIM intgift(6) AS DOUBLE
DIM intparty AS DOUBLE
	tctl.interval = .045
	tch.interval = 1
	z$ = INKEY$: IF z$ <> "" THEN i$ = z$
	IF gamestate <> gs.play THEN i$ = ""
	IF z$ = CHR$(0) + CHR$(59) THEN
		IF gamestate = gs.play THEN
			gamestate = gs.pause
			WHILE INKEY$ <> "": WEND
			intparty = TIMER - party.t.starttime
			FOR i = 1 TO enemyc
				intenemy(i) = TIMER - enemy(i).thob.starttime
			NEXT
			FOR i = 1 TO giftc
				intgift(i) = TIMER - gift(i).t.starttime
			NEXT
			DO
				ink$ = INKEY$
				IF ink$ = CHR$(0) + CHR$(62) THEN SCREENSHOT
			LOOP UNTIL ink$ = CHR$(0) + CHR$(59)
			party.t.starttime = TIMER - intparty
			FOR i = 1 TO enemyc
				enemy(i).thob.starttime = TIMER - intenemy(i)
			NEXT
			FOR i = 1 TO giftc
				gift(i).t.starttime = TIMER - intgift(i)
			NEXT
			gamestate = gs.play
		END IF
	ELSE
		SELECT CASE z$
			CASE CHR$(0) + CHR$(68), CHR$(27): gamestate = gs.quit: gameresult = gr.abort
			CASE CHR$(0) + CHR$(63): gamestate = gs.newgame
			CASE CHR$(0) + CHR$(66): nosound = NOT nosound
			CASE CHR$(0) + CHR$(62): SCREENSHOT
			CASE CHR$(0) + CHR$(65): noretrace = NOT noretrace
			CASE CHR$(0) + CHR$(83): IF shotc > 0 THEN KILL "ams*.bsv": shotc = 0
			CASE CHR$(32), CHR$(0) + CHR$(82), "0"
				IF gamestate = gs.play THEN
					GETMAZECELL digger.x, digger.y, dx, dy
					SCANMAZECELL dx, dy, l, 0, 0, 0, 0
					u = l
					SCANMAZECELL dx + 1, dy, r, 0, 0, 0, 0
					SCANMAZECELL dx, dy + 1, d, 0, 0, 0, 0
					l = (l = mz.empty)
					d = (d = mz.empty)
					u = (u = mz.empty)
					r = (r = mz.empty)
					IF (digger.mode = dgr.left AND digger.x > imgw AND l) OR (digger.mode = dgr.up AND digger.y > imgh AND u) OR (digger.mode = dgr.right AND digger.x < f.w - imgw * 2 AND r) OR (digger.mode = dgr.down AND digger.y < f.h - imgh * 2 AND d) THEN _

						IF digger.eye THEN
							digger.eye = FALSE
							digger.teye.starttime = TIMER
							SELECT CASE digger.mode
								CASE dgr.left: SHOOT -1, 0
								CASE dgr.right: SHOOT 1, 0
								CASE dgr.up: SHOOT 0, -1
								CASE dgr.down: SHOOT 0, 1
							END SELECT
							ERASEPIC digger.x, digger.y, digger.pic
							digger.pic.sequence = digger.pic.sequence + anid.withouteye
							DRAWPIC digger.x, digger.y, digger.pic, TRUE
						END IF
					END IF
				END IF
		END SELECT
	END IF
	
	IF gamestate = gs.play AND (z$ >= "a" AND z$ <= "z") OR (z$ >= "0" AND z$ <= "9") THEN
		tch.starttime = TIMER
		cheat$ = cheat$ + z$
		SELECT CASE cheat$
			CASE "mazedebug": mapon = NOT mapon: cheat$ = ""
			CASE "afterlong":
				COLOR 8
				LOCATE 21, 70
				INPUT li
				curlevel = li
				LOADLEVEL li
				cheat$ = ""
				EXIT SUB
			CASE "thecure": digger.lives = 9: cheat$ = ""
			CASE "bfg9000": digger.teye.interval = 0: digger.eye = TRUE: cheat$ = ""
			CASE "trace": DRAWMAP: cheat$ = ""
		END SELECT
	ELSE
		IF z$ <> "" THEN
			cheat$ = ""
		ELSEIF TEVENT(tch) THEN
			cheat$ = ""
		END IF
		IF TEVENT(tctl) AND gamestate = gs.play THEN
			SELECT CASE i$
				CASE CHR$(0) + CHR$(72): MOVEDIGGER 0, -1
				CASE CHR$(0) + CHR$(75): MOVEDIGGER -1, 0
				CASE CHR$(0) + CHR$(80): MOVEDIGGER 0, 1
				CASE CHR$(0) + CHR$(77): MOVEDIGGER 1, 0
			END SELECT
			i$ = ""
			IF NOT digger.eye THEN
				IF TEVENT(digger.teye) THEN
					digger.eye = TRUE
					ERASEPIC digger.x, digger.y, digger.pic
					digger.pic.sequence = digger.pic.sequence - anid.withouteye
					DRAWPIC digger.x, digger.y, digger.pic, TRUE
				END IF
			END IF
		END IF
	END IF
END SUB

FUNCTION GETLEVIDX$ (num)
	IF levelpack$ = "" THEN
		GETLEVIDX$ = NUMTOSTR$(levidx(num) + 0)
	ELSE
		GETLEVIDX$ = NUMTOSTR$(num + 0)
	END IF
END FUNCTION

SUB GETMAZECELL (x, y, rx, ry)
	IF x - viewx < 0 THEN
		rx = -1
	ELSE
		rx = (x - viewx) \ cellw
	END IF
	IF y - viewy < 0 THEN
		ry = -1
	ELSE
		ry = (y - viewy) \ cellh
	END IF
END SUB

FUNCTION GETPATH (sx, sy, tx, ty, pl) STATIC
CONST x = 0, y = 1, size = mazex * mazey
DIM d(3, 1), wl(3)
DIM mzf(mazex, mazey)
DIM pp(size, 1, 0 TO 1)
DIM bx(20), by(20)

	FOR i = 0 TO mazex - 1
		FOR j = 0 TO mazey - 1
			mzf(i, j) = 0
		NEXT
	NEXT

	dc = 4
	d(0, x) = -1: d(0, y) = 0
	d(1, x) = 1: d(1, y) = 0
	d(2, x) = 0: d(2, y) = -1
	d(3, x) = 0: d(3, y) = 1

	pf = 1
	pp(0, x, 0) = tx
	pp(0, y, 0) = ty
	pc1 = 1
	w = 0
	mzf(tx, ty) = w + 1
	FOR j = 1 TO bagc: GETMAZECELL bag(j).x, bag(j).y, bx(j), by(j): NEXT
	DO
		w = w + 1
		IF pf = 0 THEN
			pf = 1
			pf2 = 0
		ELSE
			pf = 0
			pf2 = 1
		END IF
		pc = pc1
		pc1 = 0
		fw = FALSE
		FOR i = 0 TO pc - 1
			SCANMAZECELL pp(i, x, pf), pp(i, y, pf), 0, wl(0), wl(1), wl(2), wl(3)
			FOR j = 1 TO bagc
				IF bx(j) = pp(i, x, pf) AND by(j) = pp(i, y, pf) THEN
					' it's not only means that enemies won't try to break
					' through bag when it can't be moved, it also
					' means that enemies will avoid falling bags (cause
					' they never (or very-very seldom) enter deadlocks).
					wl(2) = TRUE
					wl(3) = TRUE
					EXIT FOR
				END IF
			NEXT
			FOR dr = 0 TO dc - 1
				x1 = pp(i, x, pf) + d(dr, x)
				y1 = pp(i, y, pf) + d(dr, y)
				IF x1 >= 0 AND y1 >= 0 AND x1 <= mazex - 1 AND y1 <= mazey - 1 THEN
					IF mzf(x1, y1) = 0 THEN
						SCANMAZECELL x1, y1, v, 0, 0, 0, 0
						IF wl(dr) = FALSE AND v = mz.empty THEN
							IF x1 = sx AND y1 = sy THEN
								SELECT CASE dr
									CASE 0: dirc = 1
									CASE 1: dirc = 0
									CASE 2: dirc = 3
									CASE 3: dirc = 2
								END SELECT
								pl = w
								GETPATH = dirc
								GOTO exitfunc
							END IF
							pp(pc1, x, pf2) = x1
							pp(pc1, y, pf2) = y1
							mzf(x1, y1) = w + 1
							pc1 = pc1 + 1
						END IF
					END IF
				END IF
			NEXT
		NEXT
	LOOP UNTIL pc1 = 0
	pl = -1
	GETPATH = -1
	GOTO exitfunc
exitfunc:
	EXIT FUNCTION
DRW:
CONST cw = 5, ch = 5
CONST mvx = 639 - mazex * cw, mvy = 349 - mazey * ch
	VIEW (mvx, mvy)-(mvx + mazex * cw, mvy + mazey * ch)
	FOR q = 0 TO mazex - 1
		FOR j = 0 TO mazey - 1
			SELECT CASE mzf(q, j)
				CASE IS = 0: col = 1
				CASE IS <> 0: col = 7
			END SELECT
			LINE (q * cw, j * ch)-STEP(cw, ch), col, BF
		NEXT
	NEXT
	RESTOREFIELD
RETURN
END FUNCTION

SUB GETRANDOMCELL (dx, dy)
	DO
		dx = INT(RND * mazex)
		dy = INT(RND * mazey)
		SCANMAZECELL dx, dy, v, 0, 0, 0, 0
	LOOP UNTIL v = mz.empty
END SUB

FUNCTION IMGSIZE (w, h) STATIC
	size = (4 + INT((w + 7) / 8) * 4 * h - 1) \ 2 + 1
	IMGSIZE = size
END FUNCTION

SUB INIT
	OUT &H60, &HF3
	s! = TIMER: DO: LOOP WHILE s! + .2 > TIMER
	OUT &H60, 0
	s! = TIMER: DO: LOOP WHILE s! + .2 > TIMER
	FOR i = 1 TO 10: temp = INP(&H60): NEXT
	RANDOMIZE TIMER
	SCREEN scrmode

	levelpal = 7
	IF UCASE$(COMMAND$) <> "/I" THEN levelpack$ = COMMAND$
	nosound = TRUE
	noretrace = TRUE
	partystyle = ps.snowing
	snowc = 200
	READINI

	SETPAL pal.normal
	LOADFONT
	COLOR 7
	FADELEVEL ' to initialize speed constant, nothing else will be done
	LOADLEVIDX
	LOADGRAPHICS
	SHOWHINTS
	LOADSCORES hiscorefile, hiscore()
END SUB

SUB INITDIGGER
	digger.dx = -1
	digger.pic.sequence = ani.dgrleft: digger.mode = dgr.left
	digger.eye = TRUE
	digger.x = digger.startx
	digger.y = digger.starty
END SUB

SUB LOADFONT
	RESTORE gfx.font8x16
	FOR i = 0 TO 255
		FOR j = 0 TO 15
			READ ch
			font(i, j) = CHR$(ch)
		NEXT
	NEXT
END SUB

SUB LOADGRAPHICS
	SCREEN , , 1, 0
	graphindex = 0
	animc = 0
	RESTORE data.gfx
	FOR i = 1 TO 30
		READ framecount
		anim(animc, framec) = framecount
		anim(animc, img1) = imgc
		animc = animc + 1
		FOR f = 1 TO framecount
			LOADIMAGE w, h
			img(imgc, pic) = graphindex
			GET (0, 0)-(w - 1, h - 1), graph(graphindex)
			graphindex = graphindex + IMGSIZE(w, h) * 2
			img(imgc, mask) = graphindex
			GET (0 + w, 0)-(w - 1 + w, h - 1), graph(graphindex)
			graphindex = graphindex + IMGSIZE(w, h) * 2
			imgc = imgc + 1
		NEXT
	NEXT
	bgrc = anim(ani.bgrs, framec)
	curbgr = -1
	SCREEN , , 0, 0
	CLS
END SUB

SUB LOADIMAGE (w, h)
	READ w, h
	FOR y = 0 TO h - 1
		READ B$
		FOR x = 0 TO w - 1
			ch$ = MID$(B$, x + 1, 1)
			c1 = 0
			SELECT CASE ch$
				CASE "0" TO "9", "A" TO "F": c = VAL("&H" + ch$): c1 = 0
				CASE "/": c = 0: c1 = 15
			END SELECT
			PSET (x, y), c
			PSET (x + w, y), c1
		NEXT
	NEXT
END SUB

SUB LOADLEVEL (levidx AS INTEGER)
	IF NOT OPENLEVEL(GETLEVIDX$(levidx)) THEN
		FOR i = 1 TO digger.lives
			ADDSCORE 1000
		NEXT
		gameresult = gr.winner
		gamestate = gs.newgame
	ELSE
		eye.use = FALSE
		SCREEN , , 1, 0
		x1 = 0
		y1 = 0
		x2 = f.w - 1
		y2 = f.h - 1
		tim.nobbin = tim.s.nobbin - levidx / 2 * tim.d.nobbin: IF tim.nobbin < tim.min.nobbin THEN tim.nobbin = tim.min.nobbin
		tim.hobbin = tim.s.hobbin + levidx * tim.d.hobbin: IF tim.hobbin > tim.max.hobbin THEN tim.hobbin = tim.max.hobbin
		gamestate = gs.play
		party.use = FALSE
		decorc = 0
		bagc = 0
		giftc = 0
		enemyc = 0
		FOR i = 0 TO mazex - 1
			FOR j = 0 TO mazey - 1
				FILLMAZECELL i, j, mz.init, TRUE, TRUE, TRUE, TRUE
			NEXT
		NEXT
		curbgr = (levidx - 1) MOD bgrc
		party.t.starttime = TIMER
		y = -1
		levelpal = 7
		bgrflag = FALSE
		DO
			s$ = READLEVELSTR$
			IF LEFT$(s$, 1) = "_" THEN
				IF MID$(s$, 2, 6) = "levcol" THEN
					levelpal = VAL(RIGHT$(s$, LEN(s$) - 8))
				ELSEIF MID$(s$, 2, 6) = "levbgr" THEN
					curbgr = VAL(RIGHT$(s$, LEN(s$) - 8))
				END IF
			ELSE
				IF NOT bgrflag THEN FILLBGR curbgr: bgrflag = TRUE
				y = y + 1
				FOR x = 0 TO 14
					ch$ = MID$(s$, x + 1, 1)
					SELECT CASE ch$
						CASE "#", " ": FILLMAZECELL x, y, mz.empty, TRUE, TRUE, TRUE, TRUE
						CASE "e":
							nest.x = x
							nest.y = y
							GETCELLCOORDS x, y, party.x, party.y
							party.use = FALSE
							party.iwait = levidx * 5 + 10: IF party.iwait > 35 THEN party.iwait = 35
							party.t.interval = party.iwait
							party.ilen = 20
							nest.count = levidx \ 3 + 2: IF nest.count > 5 THEN nest.count = 5
							FILLMAZECELL x, y, mz.empty, TRUE, TRUE, TRUE, TRUE
						CASE "d": GETCELLCOORDS x, y, digger.startx, digger.starty: FILLMAZECELL x, y, mz.empty, FALSE, FALSE, TRUE, TRUE
						CASE "7": ADD newdecor, x, y
						CASE "$": ADD newbag, x, y
					END SELECT
				NEXT
			END IF
		LOOP UNTIL y = 9
		partymode = FALSE: snowready = FALSE
		bonusscore = 0
		CLOSELEVEL
		FOR i = 0 TO mazey - 1
			FOR j = 0 TO mazex - 1
				SCANMAZECELL j, i, v, 0, 0, 0, 0
				SCANMAZECELL j - 1, i, l, 0, 0, 0, 0
				SCANMAZECELL j + 1, i, r, 0, 0, 0, 0
				SCANMAZECELL j, i - 1, u, 0, 0, 0, 0
				SCANMAZECELL j, i + 1, d, 0, 0, 0, 0
				IF v = mz.empty THEN
					n = l + r + u + d
					FILLMAZECELL j, i, mz.empty, (l = mz.filled), (r = mz.filled), (u = mz.filled), (d = mz.filled)
					IF r = mz.empty OR l = mz.empty THEN FILLMAZECELL j, i, mz.empty, FALSE, FALSE, OLD, OLD
					IF n < -2 THEN FILLMAZECELL j, i, mz.empty, FALSE, FALSE, FALSE, FALSE
				END IF
			NEXT
		NEXT
		GETMAZECELL digger.startx, digger.starty, cx, cy
		FILLMAZECELL cx, cy, mz.empty, FALSE, FALSE, OLD, OLD
		GETMAZECELL party.x, party.y, cx, cy
		FILLMAZECELL cx, cy, mz.empty, FALSE, FALSE, OLD, OLD

		FOR i = 0 TO mazey - 1
			FOR j = 0 TO mazex - 1
				SCANMAZECELL j, i, v, 0, 0, 0, 0
				IF v = mz.empty THEN DRAWHOLE j, i
				a$ = INKEY$
			NEXT
		NEXT
		INITDIGGER
		SETPAL pal.normal
		FADELEVEL
	END IF
END SUB

SUB LOADLEVIDX
	RESTORE data.levidx
	i = 0
	DO
		i = i + 1
		READ levidx(i)
	LOOP UNTIL levidx(i) = -1
END SUB

SUB LOADSCORES (file$, scorebuf() AS SCORETYPE)
	OPEN hiscorefile$ FOR BINARY AS #1
	FOR i = 0 TO hiscorec - 1
		GET #1, , hiscore(i)
	NEXT
	CLOSE #1
	SHOWHISCORES
END SUB

SUB MOVEBAGS
	f = FALSE
	FOR i = 1 TO bagc
		IF bag(i).mode = bagm.swinging OR bag(i).mode = bagm.falling THEN f = TRUE: EXIT FOR
	NEXT
	FOR i = bagc TO 1 STEP -1
		SELECT CASE bag(i).mode
			CASE bagm.normal
				GETMAZECELL bag(i).x, bag(i).y, mx, my
				SCANMAZECELL mx, my + 1, f, 0, 0, 0, 0
				GETCELLCOORDS mx, my, bx, by
				IF f <> mz.filled AND bag(i).x = bx AND bag(i).y = by THEN
					bag(i).mode = bagm.swinging
					bag(i).misc = 0
					FILLMAZECELL mx, my, mz.empty, OLD, OLD, OLD, FALSE
				END IF
			CASE bagm.swinging
				'RETRACE
				ERASEPIC bag(i).x, bag(i).y, bag(i).pic
				SELECT CASE bag(i).misc MOD 3
					CASE 0: bag(i).pic.sequence = ani.bagleft
					CASE 1: bag(i).pic.sequence = ani.bag
					CASE 2: bag(i).pic.sequence = ani.bagright
				END SELECT
				bag(i).misc = bag(i).misc + 1
				IF bag(i).misc > 6 THEN
					bag(i).mode = bagm.falling
					bag(i).pic.sequence = ani.bagfall
					GETMAZECELL bag(i).x, bag(i).y, 0, bag(i).fally
					FOR B = 0 TO 4: DRAWIMG bag(i).x - 5, bag(i).y + 12 - B * diggerspeedy, iblob.up, FALSE: NEXT
				END IF
				DRAWPIC bag(i).x, bag(i).y, bag(i).pic, TRUE
				REDRAW bag(i).x, bag(i).y, decor(), decorc
				REDRAW bag(i).x, bag(i).y, gift(), giftc
				PLAYSOUND snd.bagswing
			CASE bagm.falling
				' erase bag and dig through soil under it.
				'RETRACE
				ERASEPIC bag(i).x, bag(i).y, bag(i).pic
				FOR B = 0 TO 2
					DRAWIMG bag(i).x - 5, bag(i).y + 12 - B * diggerspeedy, iblob.up, FALSE
				NEXT

				' move bag and check for digger
				bag(i).y = bag(i).y + diggerspeedy * 2
				IF BOXCOLL(digger.x, digger.y, imgw, imgh, bag(i).x, bag(i).y, imgw, imgh) THEN
					digger.mode = dgr.falling
					ERASEPIC digger.x, digger.y, digger.pic
					digger.pic.sequence = ani.dgrdie
					digger.pic.frame = 0
					digger.x = bag(i).x
					digger.y = bag(i).y
					gamestate = gs.killed
					DRAWPIC digger.x, digger.y, digger.pic, TRUE
					ERASEPIC bag(i).x, bag(i).y, bag(i).pic
				END IF

				' check for landing
				GETMAZECELL bag(i).x, bag(i).y, bx, by
				SCANMAZECELL bx, by + 1, v, 0, 0, 0, 0
				FILLMAZECELL bx, by, mz.empty, OLD, OLD, 2 * (by = bag(i).fally), 2 * (v = mz.filled)
				exists = TRUE
				IF v = mz.filled THEN
					PLAYSOUND snd.baglanding
					' if digger falling with this bag, he's now dead
					IF digger.x = bag(i).x AND digger.y = bag(i).y THEN
						PLAYSOUND snd.dead
						digger.mode = dgr.dead
					END IF
					' if height>1, gifts and sweets appear
					IF by - bag(i).fally > 1 THEN
						GETMAZECELL bag(i).x, bag(i).y, x, y
						ADD newgift, x, y
						exists = FALSE
					ELSE
						bag(i).mode = bagm.normal
						bag(i).pic.sequence = ani.bag
					END IF
				END IF

				' check for enemy killing and landing
				FOR j = 1 TO enemyc
					IF BOXCOLL(bag(i).x, bag(i).y, imgw, imgh, enemy(j).x, enemy(j).y, imgw, imgh) AND enemy(j).mode <> enm.dead THEN
						' if bag is falling, enemy is falling with it, else ...
						IF exists AND bag(i).mode <> bagm.normal THEN
							enemy(j).mode = enm.falling
							ERASEPIC enemy(j).x - 1, enemy(j).y, enemy(j).pic
							enemy(j).y = bag(i).y
							enemy(j).x = bag(i).x ' <== if not, enemy can corrupt ground
							IF enemy(j).mode = enm.nobbin THEN
								enemy(j).pic.sequence = ani.nobbindie
							ELSEIF enemy(j).mode = enm.hobbin THEN
								enemy(j).pic.sequence = enm.nobbin
							END IF
							enemy(j).pic.frame = 0
							DRAWPIC enemy(j).x - 1, enemy(j).y, enemy(j).pic, TRUE
							ERASEPIC bag(i).x, bag(i).y, bag(i).pic
						ELSE
							' ... else enemy is dead
							enemy(j).mode = enm.dead
							enemy(j).tdead.starttime = TIMER: enemy(j).tdead.interval = .5
							ERASEPIC enemy(j).x - 1, enemy(j).y, enemy(j).pic
							enemy(j).y = bag(i).y
						END IF
					END IF
				NEXT

				IF exists THEN
					DRAWPIC bag(i).x, bag(i).y, bag(i).pic, FALSE
					REDRAW bag(i).x, bag(i).y - diggerspeedy * 2, decor(), decorc
					REDRAW bag(i).x, bag(i).y - diggerspeedy * 2, gift(), giftc
				ELSE ' destroy it
					SWAP bag(i), bag(bagc)
					bagc = bagc - 1
					MOVEGIFT
				END IF
			CASE bagm.left, bagm.right
				moveit = TRUE
				IF bag(i).mode = bagm.left THEN
					dx = -diggerspeedx
				ELSE
					dx = diggerspeedx
				END IF

				IF BOXCOLL(bag(i).x + dx, bag(i).y, cellw, cellh, digger.x, digger.y, imgw, imgh) AND digger.x * SGN(dx) > (bag(i).x + dx) * SGN(dx) THEN moveit = FALSE
				FOR j = 1 TO enemyc
					IF BOXCOLL(bag(i).x + dx, bag(i).y, cellw, cellh, enemy(j).x, enemy(j).y, imgw, imgh) AND enemy(j).mode <> bagm.dead THEN moveit = FALSE
				NEXT

				IF moveit = TRUE THEN
					bx = bag(i).x + dx
					' shift complete?
					GETMAZECELL bx, bag(i).y, bgx, bgy
					GETCELLCOORDS bgx, bgy, bgx0, bgy0
					IF bx = bgx0 THEN
						ERASEPIC bag(i).x, bag(i).y, bag(i).pic
						bag(i).mode = bagm.normal
						bag(i).pic.sequence = ani.bag
						SCANMAZECELL bgx, bgy + 1, v, 0, 0, 0, 0
						FILLMAZECELL bgx, bgy, FALSE, (NOT (dx > 0)) * 2, (NOT (dx < 0)) * 2, OLD, OLD
						IF v <> mz.filled THEN
							bag(i).mode = bagm.falling
							bag(i).pic.sequence = ani.bagfall
							bag(i).fally = bgy
						END IF
					END IF
					' dig through soil and redraw bag.
					RETRACE
					IF dx > 0 THEN
						FOR q = 0 TO 1
							j = q * diggerspeedx
							DRAWIMG bag(i).x - j + 3, bag(i).y - 1, iblob.left, FALSE
						NEXT
					ELSE
						FOR q = 0 TO 1
							j = q * diggerspeedx
							DRAWIMG bag(i).x + imgw - 8 - j + 3, bag(i).y - 1, iblob.right, FALSE
						NEXT
					END IF
					ERASEPIC bag(i).x, bag(i).y, bag(i).pic
					bag(i).x = bx
					
					' automatically draw current bag (it collides with itself).
					REDRAW bag(i).x - dx, bag(i).y - dy, bag(), bagc

					REDRAW bag(i).x - dx, bag(i).y, decor(), decorc
					PLAYSOUND snd.bagshift
				ELSE
					ERASEPIC bag(i).x, bag(i).y, bag(i).pic
					IF bag(i).mode = bagm.left THEN
						bag(i).mode = bagm.right
						bag(i).pic.sequence = ani.bagright
					ELSE
						bag(i).mode = bagm.left
						bag(i).pic.sequence = ani.bagleft
					END IF
					DRAWPIC bag(i).x, bag(i).y, bag(i).pic, FALSE
					REDRAW bag(i).x, bag(i).y, decor(), decorc
				END IF
		END SELECT
	NEXT
END SUB

SUB MOVEDIGGER (dx, dy)
	newx = digger.x + diggerspeedx * dx
	newy = digger.y + diggerspeedy * dy
	GETMAZECELL newx, newy, nx, ny
	GETCELLCOORDS nx, ny, n1x, n1y
	IF nx < 0 OR ny < 0 OR ((nx >= mazex - 1 AND newx <> n1x AND dx > 0) OR (ny >= mazey - 1 AND newy <> n1y AND dy > 0)) THEN EXIT SUB

	' *** adjust for maze cells *** '
	IF ((n1y <> newy AND dx <> 0) OR (n1x <> newx AND dy <> 0)) AND (dx <> digger.dx OR dy <> digger.dy) THEN
		' *** if not in cell, move it in currently used direction
		dx = digger.dx
		dy = digger.dy
		amode = digger.pic.sequence
	ELSE
		' *** if in cell, change direction *** '
		IF dx < 0 THEN digger.mode = dgr.left: amode = ani.dgrleft
		IF dx > 0 THEN digger.mode = dgr.right: amode = ani.dgrright
		IF dy < 0 THEN digger.mode = dgr.up: amode = ani.dgrup
		IF dy > 0 THEN digger.mode = dgr.down: amode = ani.dgrdown
		IF NOT digger.eye THEN amode = amode + anid.withouteye
	END IF
 
	newx = digger.x + diggerspeedx * dx
	newy = digger.y + diggerspeedy * dy
	IF CHECKBAGSHIFT(newx, newy, dx) THEN EXIT SUB

	digger.dx = dx
	digger.dy = dy
 
	' *** adjust maze *** '
	GETMAZECELL newx - 1, newy, clx, cy
	GETMAZECELL newx, newy - 1, cx, cuy
	GETMAZECELL digger.x - 1, digger.y, olx, oy
	GETMAZECELL digger.x, digger.y - 1, ox, ouy
	IF dx < 0 THEN
		IF clx <> olx THEN FILLMAZECELL clx + 1, cy, mz.empty, FALSE, OLD, OLD, OLD
		SCANMAZECELL clx, cy, v, 0, 0, 0, 0
		FILLMAZECELL clx, cy, (2 * (olx <> clx) + 1) * mz.half * ABS(v), OLD, FALSE, OLD, OLD
	END IF
	IF dx > 0 THEN
		IF ox <> cx THEN FILLMAZECELL cx, cy, mz.empty, OLD, FALSE, OLD, OLD
		SCANMAZECELL cx + 1, cy, v, 0, 0, 0, 0
		FILLMAZECELL cx + 1, cy, (2 * (ox <> cx) + 1) * mz.half * ABS(v), FALSE, OLD, OLD, OLD
	END IF
	IF dy < 0 THEN
		IF cuy <> ouy THEN FILLMAZECELL cx, cuy + 1, mz.empty, OLD, OLD, FALSE, OLD
		SCANMAZECELL cx, cuy, v, 0, 0, 0, 0
		FILLMAZECELL cx, cuy, (2 * (ouy <> cuy) + 1) * mz.half * ABS(v), OLD, OLD, OLD, FALSE
	END IF
	IF dy > 0 THEN
		IF cy <> oy THEN FILLMAZECELL cx, cy, mz.empty, OLD, OLD, OLD, FALSE
		SCANMAZECELL cx, cy + 1, v, 0, 0, 0, 0
		FILLMAZECELL cx, cy + 1, (2 * (oy <> cy) + 1) * mz.half * ABS(v), OLD, OLD, FALSE, OLD
	END IF

	' *** dig through the ground *** '
	SELECT CASE digger.mode
		CASE dgr.left: DRAWIMG newx - 5, newy - 1, iblob.left, FALSE
		CASE dgr.right: DRAWIMG newx + 10 + 1, newy - 1, iblob.right, FALSE
		CASE dgr.up: DRAWIMG newx - 5, newy - 3, iblob.up, FALSE
		CASE dgr.down: DRAWIMG newx - 5, newy + 12, iblob.down, FALSE
	END SELECT

	' redraw sprite
	RETRACE
	ERASEPIC digger.x, digger.y, digger.pic
	digger.x = newx
	digger.y = newy
	digger.pic.sequence = amode
	n = 3
	DRAWPIC digger.x, digger.y, digger.pic, TRUE
	CHECKDECORS digger.x, digger.y, TRUE
	CHECKGIFT digger.x, digger.y, TRUE
	REDRAW digger.x + dx * n, digger.y + dy * n, decor(), decorc
	REDRAW digger.x + dx * n, digger.y + dy * n, gift(), giftc
END SUB

SUB MOVEENEMIES
DIM delta(3, 1)
DIM w(3), cl(3), dl(3), ds(3)
DIM aw(1 TO 4), bw(1 TO 4)
CONST xd = 0, yd = 1
STATIC nn
	nn = (nn + 1) MOD 2
	delta(0, xd) = -1
	delta(1, xd) = 1
	delta(2, yd) = -1
	delta(3, yd) = 1
	FOR i = enemyc TO 1 STEP -1
		IF (enemy(i).stpx = enemy(i).x AND enemy(i).stpy = enemy(i).y) AND gamestate = gs.play AND enemy(i).mode <> enm.falling THEN
			GETMAZECELL enemy(i).x, enemy(i).y, cx, cy
			IF enemy(i).mode = enm.nobbin THEN
				IF INT(RND * 1000) < 70 OR (cx = enemy(i).trgx AND cy = enemy(i).trgy) OR enemy(i).chaseflee = TRUE THEN
					IF INT(RND * 100) < (20 + 15 * (enemy(i).chaseflee = TRUE)) AND NOT partymode THEN
						enemy(i).chaseflee = FALSE
						GETRANDOMCELL dx, dy
						enemy(i).trgx = dx
						enemy(i).trgy = dy
					ELSE
						enemy(i).chaseflee = TRUE
						GETMAZECELL digger.x, digger.y, dx, dy
						IF partymode THEN
							temp = GETPATH(cx, cy, dx, dy, pl0)
							IF pl0 <> -1 THEN
								SCANMAZECELL cx, cy, 0, w(0), w(1), w(2), w(3): FOR j = 0 TO 3: SCANMAZECELL cx + delta(j, xd), cy + delta(j, yd), cl(j), 0, 0, 0, 0: NEXT
								bwc = 0: awc = 0
								FOR j = 0 TO 3
									IF w(j) = FALSE AND cl(j) = mz.empty THEN
										temp = GETPATH(dx, dy, cx + delta(j, xd), cy + delta(j, yd), pl)
										awc = awc + 1: aw(awc) = j
										IF pl > pl0 THEN bwc = bwc + 1: bw(bwc) = j
									END IF
								NEXT
								IF bwc > 0 THEN
									j = INT(RND * bwc) + 1
									dx = cx + delta(bw(j), xd)
									dy = cy + delta(bw(j), yd)
								ELSEIF awc > 0 THEN
									j = INT(RND * awc) + 1
									dx = cx + delta(aw(j), xd)
									dy = cy + delta(aw(j), yd)
								ELSE
									enemy(i).trgx = cx
									enemy(i).trgy = cy
								END IF
							ELSE
								GETRANDOMCELL dx, dy
								enemy(i).trgx = dx
								enemy(i).trgy = dy
								enemy(i).chaseflee = FALSE
							END IF
						ELSE
							enemy(i).chaseflee = TRUE
						END IF
					END IF
				END IF
				FILLMAZECELL cx, cy, mz.empty, OLD, OLD, OLD, OLD
				SCANMAZECELL dx, dy, v, 0, 0, 0, 0
				DO
					IF enemy(i).chaseflee = TRUE THEN
						IF v <> mz.empty THEN
							IF digger.dx <> 0 THEN
								dx = dx + 1
							ELSEIF digger.dy <> 0 THEN
								dy = dy + 1
							END IF
						END IF
						r = GETPATH(cx, cy, dx, dy, 0)
						enemy(i).trgx = dx
						enemy(i).trgy = dy
					ELSE
						r = GETPATH(cx, cy, enemy(i).trgx, enemy(i).trgy, 0)
					END IF
					IF r = -1 THEN
						GETRANDOMCELL dx, dy
						enemy(i).chaseflee = FALSE
						enemy(i).trgx = dx
						enemy(i).trgy = dy
					ELSE
						EXIT DO
					END IF
				LOOP
				SELECT CASE r
					CASE 0: cx = cx - 1
					CASE 1: cx = cx + 1
					CASE 2: cy = cy - 1
					CASE 3: cy = cy + 1
				END SELECT
			ELSEIF enemy(i).mode = enm.hobbin THEN
				' hobbin can become nobbin only when it doesn't dig the tunnel,
				' otherwise nobbin will dig through soil.
				IF NOT partymode THEN
					IF TEVENT(enemy(i).thob) THEN
						enemy(i).thob.starttime = TIMER
						ERASEPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic
						enemy(i).pic.sequence = ani.nobbin
						enemy(i).pic.frame = 0
						enemy(i).mode = enm.nobbin
						enemy(i).thob.interval = tim.nobbin
						EXIT FOR
					END IF
				END IF
				d = enemy(i).dir
				FILLMAZECELL cx, cy, FALSE, (d <> 1) * 2, (d <> 2) * 2, (d <> 3) * 2, (d <> 4) * 2
				DO
					enemy(i).chaseflee = INT(RND * 200) < 20 - 160 * enemy(i).chaseflee
					IF enemy(i).chaseflee = TRUE THEN
						dist0x = ABS(enemy(i).x - digger.x)
						dist0y = ABS(enemy(i).y - digger.y)
						btime! = TIMER
						l = 0  ' longer way directions
						s = 0  ' shorter way directions
						FOR j = 1 TO 4
							'    for hobbin, dirs are 01234 <0lrud (0=no dir)>;
							'    in delta, they are 0123 <lrud>;
							'    so we will convert hobbin's dir to delta dir with (j - 1).
							distJx = ABS(enemy(i).x - digger.x + diggerspeedx * delta(j - 1, xd))
							distJy = ABS(enemy(i).y - digger.y + diggerspeedy * delta(j - 1, yd))
							IF distJx < dist0x OR distJy < dist0y THEN
								s = s + 1
								ds(s - 1) = j
							ELSE
								l = l + 1
								dl(l - 1) = j
							END IF
						NEXT
						IF partymode THEN
							enemy(i).dir = dl(INT(RND * l))
						ELSE
							enemy(i).dir = ds(INT(RND * s))
						END IF
					ELSE
						IF enemy(i).dir = 0 OR INT(RND * 5) = 2 THEN enemy(i).dir = INT(RND * 4) + 1
					END IF
					SELECT CASE enemy(i).dir
						CASE 1: IF cx = 0 THEN enemy(i).dir = 0 ELSE cx = cx - 1
						CASE 2: IF cx = mazex - 1 THEN enemy(i).dir = 0 ELSE cx = cx + 1
						CASE 3: IF cy = 0 THEN enemy(i).dir = 0 ELSE cy = cy - 1
						CASE 4: IF cy = mazey - 1 THEN enemy(i).dir = 0 ELSE cy = cy + 1
					END SELECT
					d = enemy(i).dir
					FILLMAZECELL cx, cy, OLD, (d <> 2) * 2, (d <> 1) * 2, (d <> 4) * 2, (d <> 3) * 2
				LOOP UNTIL enemy(i).dir <> 0
			END IF
			GETCELLCOORDS cx, cy, enemy(i).stpx, enemy(i).stpy
		END IF
		IF enemy(i).mode = enm.dead THEN
			IF TEVENT(enemy(i).tdead) THEN
				ERASEPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic
				REDRAW enemy(i).x - 1, enemy(i).y, gift(), giftc
				REDRAW enemy(i).x - 1, enemy(i).y, bag(), bagc
				SWAP enemy(i), enemy(enemyc)
				enemyc = enemyc - 1
				ADDSCORE 250
			ELSE
				DRAWPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic, FALSE
				REDRAW enemy(i).x, enemy(i).y, gift(), giftc
			END IF
		ELSE
			' nobbin can become hobbin anytime, because if it shifts a bag,
			' and other nobbin (or digger!) shift this bag too from the other side,
			' our nobbin will never become hobbin. and look at hobbin->nobbin part.
			IF enemy(i).mode = enm.nobbin AND NOT partymode THEN
				IF TEVENT(enemy(i).thob) AND gamestate = gs.play THEN
					enemy(i).thob.starttime = TIMER
					ERASEPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic
					enemy(i).pic.sequence = ani.hobbinleft
					enemy(i).pic.frame = 0
					enemy(i).mode = enm.hobbin
					enemy(i).chaseflee = TRUE
					enemy(i).thob.interval = tim.hobbin
				END IF
			END IF
		END IF
	NEXT

	FOR i = 1 TO enemyc
		IF enm.mode <> enm.falling AND enemy(i).mode <> enm.dead THEN
			CHECKGIFT enemy(i).x, enemy(i).y, FALSE
			CHECKDECORS enemy(i).x, enemy(i).y, FALSE
		END IF
	NEXT

	' move them on the screen
	RETRACE
		FOR i = 1 TO enemyc
			IF enemy(i).mode <> enm.falling AND enemy(i).mode <> enm.dead THEN
				nx = enemy(i).x + diggerspeedx * SGN(enemy(i).stpx - enemy(i).x)
				ny = enemy(i).y + diggerspeedy * SGN(enemy(i).stpy - enemy(i).y)
				oldx = enemy(i).x
				oldy = enemy(i).y
				IF enemy(i).mode = enm.hobbin OR NOT CHECKBAGSHIFT(nx, ny, SGN(enemy(i).stpx - enemy(i).x)) THEN
					IF enemy(i).mode = enm.hobbin THEN
						FOR j = bagc TO 1 STEP -1
							IF bag(j).mode <> bagm.falling AND BOXCOLL(nx, ny, imgw, imgh, bag(j).x + 1, bag(j).y + 1, imgw - 2, imgh - 2) AND bag(j).mode <> bagm.falling THEN
								ERASEPIC bag(j).x, bag(j).y, bag(j).pic
								SWAP bag(bagc), bag(j)
								bagc = bagc - 1
							END IF
						NEXT
						SELECT CASE enemy(i).dir
							CASE 1: DRAWIMG nx - 5, ny - 1, iblob.left, FALSE
							CASE 2: DRAWIMG nx + 10 + 1, ny - 1, iblob.right, FALSE
							CASE 3: DRAWIMG nx - 5, ny - 3, iblob.up, FALSE
							CASE 4: DRAWIMG nx - 5, ny + 12, iblob.down, FALSE
						END SELECT
						IF nx < enemy(i).x AND enemy(i).pic.sequence <> ani.hobbinleft THEN
							ERASEPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic
							enemy(i).pic.sequence = ani.hobbinleft
						END IF
						IF nx > enemy(i).x AND enemy(i).pic.sequence <> ani.hobbinright THEN
							ERASEPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic
							enemy(i).pic.sequence = ani.hobbinright
						END IF
					END IF
					ERASEPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic
					enemy(i).x = nx
					enemy(i).y = ny
					IF nn THEN ANIMATE enemy(i).pic
				END IF
				DRAWPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic, TRUE
				IF party.use THEN
					IF BOXCOLL(oldx, oldy, cellw, cellh, party.x, party.y, cellw, cellh) THEN
						RETRACE
						DRAWIMG party.x, party.y, anim(ani.party, img1), FALSE
					END IF
				END IF
			END IF
		NEXT
END SUB

SUB MOVEEYE
	ERASEPIC eye.x, eye.y, eye.pic
	REDRAW eye.x, eye.y, bag(), bagc
	REDRAW eye.x, eye.y, decor(), decorc
	REDRAW eye.x, eye.y, gift(), giftc
	ANIMATE eye.pic
	IF eye.mode = eyem.normal THEN
		eye.x = eye.x + eye.dx * diggerspeedx * 2
		eye.y = eye.y + eye.dy * diggerspeedy * 2
		FOR i = enemyc TO 1 STEP -1
			IF BOXCOLL(enemy(i).x, enemy(i).y, imgw, imgh, eye.x, eye.y, eyew, eyeh) THEN
				ERASEPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic
				eye.pic.sequence = ani.expl
				eye.pic.frame = 0
				eye.mode = eyem.expl
				ADDSCORE 250
				SWAP enemy(i), enemy(enemyc)
				enemyc = enemyc - 1
				PLAYSOUND snd.hit
				PLAYSOUND snd.killenemy
				EXIT FOR
			END IF
		NEXT
		GETMAZECELL eye.x - (eye.dx > 0) * (diggerspeedx + eyew), eye.y - (eye.dy > 0) * (diggerspeedy + eyeh), x, y
		SCANMAZECELL x, y, i, 0, 0, 0, 0
		IF i = mz.filled THEN
			PLAYSOUND snd.hit
			eye.pic.sequence = ani.expl
			eye.pic.frame = 0
			eye.mode = eyem.expl
		END IF
	ELSE
		IF eye.pic.frame = anim(ani.expl, framec) - 1 THEN eye.use = FALSE
	END IF
	IF eye.use THEN DRAWPIC eye.x, eye.y, eye.pic, FALSE
END SUB

SUB MOVEGIFT
	FOR i = giftc TO 1 STEP -1
		IF gift(i).pic.frame <> 2 THEN
			RETRACE
			ERASEPIC gift(i).x, gift(i).y, gift(i).pic
			REDRAW gift(i).x, gift(i).y, bag(), bagc
			REDRAW gift(i).x, gift(i).y, decor(), decorc
			ANIMATE gift(i).pic
			DRAWPIC gift(i).x, gift(i).y, gift(i).pic, FALSE
		END IF
		GETMAZECELL gift(i).x, gift(i).y, x, y
		SCANMAZECELL x, y + 1, v, 0, 0, 0, 0
		IF v <> mz.filled THEN gift(i).t.interval = 5
		IF TEVENT(gift(i).t) THEN
			ERASEPIC gift(i).x, gift(i).y, gift(i).pic
			REDRAW gift(i).x, gift(i).y, decor(), decorc
			REDRAW gift(i).x, gift(i).y, bag(), bagc
			SWAP gift(i), gift(giftc)
			giftc = giftc - 1
		END IF
	NEXT
END SUB

SUB NEWGAME
DIM tbags AS TIMEINT
DIM tstat AS TIMEINT
DIM tdgra AS TIMEINT
DIM tgift AS TIMEINT
DIM tbon AS TIMEINT
DIM tenem AS TIMEINT
DIM tenew AS TIMEINT
	RESTOREFIELD
	gameresult = 0
	tbon.interval = .1
	tbags.interval = .1
	tstat.interval = .1
	tdgra.interval = .08
	tgift.interval = .1
	tcons.interval = 1
	tenem.interval = .045
	tenew.interval = 3
	tim.eye = 1
	digger.lives = 4
	digger.score = 0
	digger.teye.interval = tim.eye
	NEXTLEVEL
	DO
		ADDSCORE 0

		GETINPUTS
		IF gamestate = gs.newgame OR gamestate = gs.quit THEN EXIT SUB

		IF gamestate <> gs.killed THEN
			' next level if all decors collected
			IF decorc = 0 THEN
				DRAWPIC digger.x, digger.y, digger.pic, FALSE
				NEXTLEVEL
				IF gamestate = gs.quit THEN EXIT SUB
			END IF
			CELEBRATE 'if partymode = TRUE, but if it not so, snow will be erased.
			IF partymode = FALSE AND enemyc < nest.count THEN
				IF TEVENT(tenew) THEN ADD newnobbin, nest.x, nest.y
			END IF
			IF TEVENT(tenem) THEN
				MOVEENEMIES
				IF eye.use THEN MOVEEYE
				CHECKKILL
			END IF
			IF TEVENT(party.t) THEN
				IF partymode THEN
					partymode = FALSE
					SETPAL pal.normal
					party.t.starttime = TIMER
					party.iwait = party.iwait + 5
					party.t.interval = party.iwait
				ELSE
					party.t.interval = party.ilen
					party.t.starttime = TIMER
					party.use = TRUE
				END IF
			END IF
			IF TEVENT(tbon) THEN CHECKPARTY digger.x, digger.y, TRUE
			IF TEVENT(tcons) THEN consorn = 0 ' remove decor octave
		ELSE
			tdgra.interval = .14
			IF digger.pic.frame = anim(ani.dgrdie, framec) - 1 THEN
				IF NOT RESTART THEN EXIT SUB
				tdgra.interval = .08
			END IF
		END IF
		IF TEVENT(tgift) THEN MOVEGIFT: IF gamestate <> gs.play THEN DRAWPIC digger.x, digger.y, digger.pic, FALSE
		IF TEVENT(tbags) THEN MOVEBAGS
		IF TEVENT(tstat) THEN SHOWSCORE digger.score, digger.lives
		IF TEVENT(tdgra) AND digger.mode <> dgr.falling THEN
			RETRACE
			ERASEPIC digger.x, digger.y, digger.pic
			IF digger.mode = dgr.dead THEN
				REDRAW digger.x, digger.y, bag(), bagc
				REDRAW digger.x, digger.y, decor(), decorc
				REDRAW digger.x, digger.y, gift(), giftc
			END IF
			ANIMATE digger.pic
			DRAWPIC digger.x, digger.y, digger.pic, FALSE
		END IF
	LOOP
END SUB

SUB NEXTLEVEL
	curlevel = curlevel + 1
	LOADLEVEL curlevel
END SUB

FUNCTION NUMTOSTR$ (n AS LONG)
	NUMTOSTR = LTRIM$(RTRIM$(STR$(n)))
END FUNCTION

FUNCTION OPENLEVEL (idx$)
	IF levelpack$ = "" THEN
		RESTORE data.levels
		DO
			READ s$: s$ = LTRIM$(RTRIM$(s$))
			IF s$ = "_end" THEN
				OPENLEVEL = FALSE
				EXIT FUNCTION
			END IF
		LOOP UNTIL s$ = "_mine #" + idx$
		OPENLEVEL = TRUE
	ELSE
		OPEN levelpack$ FOR INPUT AS #1
		DO
			LINE INPUT #1, s$: s$ = LTRIM$(RTRIM$(s$))
			IF s$ = "_end" THEN
				OPENLEVEL = FALSE
				CLOSE #1
				EXIT FUNCTION
			END IF
		LOOP UNTIL s$ = "_mine #" + idx$
		OPENLEVEL = TRUE
	END IF
END FUNCTION

SUB PLAYSOUND (sndcode)
	IF nosound THEN EXIT SUB
	SELECT CASE sndcode
		CASE snd.killenemy: FOR i = 85 TO 100: SOUND ((i - 84) ^ 3) / 40 + 37 + (i MOD 3) * 40, i / 400: NEXT
		CASE snd.shoot: SOUND 1000 + RND * 1000 + 37, .3
		CASE snd.hit: SOUND RND * 1000 + 237, RND * .04 + .04
		CASE snd.dead: FOR j = 0 TO 14: SOUND ABS(SIN(j / 5)) * 2700 + 37, .21: NEXT
		CASE snd.bagshift: SOUND RND * 100 + 37, RND * .04 + .04
		CASE snd.baglanding: FOR j = 1 TO 10: SOUND RND * 200 + 40, RND * .17: NEXT
		CASE snd.decor: a = RND * 1400: FOR i = 1 TO 70: SOUND i + 37 + (i MOD 3) * 100 + 8000 + a, i / 2800: NEXT
		CASE snd.gift: a = 30: FOR i = 1 TO 10: a = a * 1.5: SOUND a + RND * 200 + 400, .1: NEXT
	END SELECT
END SUB

SUB QUIT
	SCREEN 0
	WIDTH 80, 25
	ERASE img
	ERASE gift
	ERASE bag
	ERASE decor
	ERASE graph
	ERASE anim
	PRINT PROGNAME$ + " " + PROGVER$ + ", 2002-2008"
	PRINT "Better luck next time!"
	END
END SUB

SUB READINI
	OPEN inifile$ FOR BINARY ACCESS READ AS #1
	SEEK #1, 1
	FOR i = 1 TO 10
		a$ = SPACE$(3): GET #1, , a$
		SELECT CASE LCASE$(LEFT$(a$, 2))
			CASE "s+": nosound = FALSE
			CASE "s-": nosound = TRUE
			CASE "r-": noretrace = TRUE
			CASE "r+": noretrace = FALSE
			CASE "bw": partystyle = ps.whitebgr
			CASE "bb": partystyle = ps.brightbgr
			CASE "bs": partystyle = ps.snowing
		END SELECT
		IF LCASE$(LEFT$(a$, 1)) = "f" THEN
			snowc = VAL("&h" + RIGHT$(a$, 2)) * 10
			IF snowc = 0 THEN snowc = 7
		END IF
	NEXT
	CLOSE #1
END SUB

FUNCTION READLEVELSTR$
	IF levelpack$ = "" THEN
		READ s$
		READLEVELSTR$ = s$
	ELSE
		LINE INPUT #1, s$
		READLEVELSTR$ = s$
	END IF
END FUNCTION

SUB REDRAW (x, y, obj() AS PICKUPTYPE, objc)
	FOR j = 1 TO objc
		IF ABS(y - obj(j).y) < cellh THEN
			IF ABS(x - obj(j).x) < cellw THEN
				IF BOXCOLL(x, y, cellw, cellh, obj(j).x - 2, obj(j).y - 2, cellw - 3, cellh - 3) THEN
					DRAWPIC obj(j).x, obj(j).y, obj(j).pic, FALSE
					EXIT SUB
				END IF
			END IF
		END IF
	NEXT
END SUB

SUB REDRAWOBJS (arr() AS PICKUPTYPE, n, maskfl)
	FOR i = 1 TO n: DRAWPIC arr(i).x, arr(i).y, arr(i).pic, FALSE: NEXT
END SUB

FUNCTION RESTART
	DELAY 1
	WHILE INKEY$ <> "": WEND
	digger.lives = digger.lives - 1
	IF digger.lives < 0 THEN
		digger.lives = 0
		RESTART = FALSE
		gameresult = gr.gameover
		EXIT FUNCTION
	END IF
	IF party.use = FALSE THEN party.t.starttime = TIMER
	FOR i = 1 TO enemyc
		ERASEPIC enemy(i).x - 1, enemy(i).y, enemy(i).pic
	NEXT
	FOR i = bagc TO 1 STEP -1
		IF bag(i).mode = bagm.falling THEN
			ERASEPIC bag(i).x, bag(i).y, bag(i).pic
			SWAP bag(i), bag(bagc)
			bagc = bagc - 1
		END IF
	NEXT
	enemyc = 0
	IF eye.use THEN
		ERASEPIC eye.x, eye.y, eye.pic
		eye.use = FALSE
	END IF
	ERASEPIC digger.x, digger.y, digger.pic
	INITDIGGER
	gamestate = gs.play
	FOR i = 1 TO bagc
		DRAWPIC bag(i).x, bag(i).y, bag(i).pic, FALSE
		temp = LEN(INKEY$)
	NEXT
	FOR i = 1 TO decorc
		DRAWPIC decor(i).x, decor(i).y, decor(i).pic, FALSE
		temp = LEN(INKEY$)
	NEXT
	FOR i = 1 TO giftc
		DRAWPIC gift(i).x, gift(i).y, gift(i).pic, FALSE
		temp = LEN(INKEY$)
	NEXT
	RESTART = TRUE
END FUNCTION

SUB RESTOREFIELD
	VIEW (f.x, f.y)-(f.x + f.w - 1, f.y + f.h - 1)
END SUB

SUB RETRACE
STATIC n
	n = (n + 1) MOD 3
	IF NOT noretrace AND n = 0 THEN WAIT &H3DA, 8
END SUB

SUB SCANMAZECELL (cx, cy, inner, lw, rw, uw, dw)
	cx2 = cx * 2
	cy2 = cy * 2
	IF cx < 0 OR cy < 0 OR cx > mazex - 1 OR cy > mazey - 1 THEN
		inner = mz.filled
		lw = TRUE
		rw = TRUE
		uw = TRUE
		dw = TRUE
	ELSE
		inner = maze(cx2, cy2)
		lw = maze(cx2 - 1, cy2)
		rw = maze(cx2 + 1, cy2)
		uw = maze(cx2, cy2 - 1)
		dw = maze(cx2, cy2 + 1)
	END IF
END SUB

SUB SCREENSHOT
	a$ = NUMTOSTR$(shotc + 0)
	a$ = STRING$(5 - LEN(a$), "0") + a$
	shotc = shotc + 1

	siz = IMGSIZE(f.w, f.h) + 1
	DIM buf(siz) AS INTEGER

	buf(0) = ABS(partymode) + &H100 * partystyle

	GET (0, 0)-(f.w - 1, f.h - 1), buf(1)
	LINE (0, 0)-STEP(f.w, f.h), 1, BF
	DEF SEG = VARSEG(buf(1))
	BSAVE "ams" + a$ + ".bsv", VARPTR(buf(0)), siz * 2
	DEF SEG

	WHILE LEN(INKEY$) <> 0: WEND
	PUT (0, 0), buf(1), PSET
	ERASE buf
END SUB

SUB SETPAL (palmode AS INTEGER)
	IF nopal OR scrmode = 12 THEN EXIT SUB
	WAIT &H3DA, 8: WAIT &H3DA, 8, 8
	SELECT CASE palmode
		CASE pal.normal
			PALETTE 0, levelpal
			PALETTE 1, 57
			PALETTE 2, 10
			PALETTE 3, 35
			PALETTE 4, 12
			PALETTE 5, 13 + 32
			PALETTE 6, 36
			PALETTE 7, 15
			PALETTE 8, 0
			PALETTE 9, 11
			PALETTE 10, 19
			PALETTE 11, 27
			PALETTE 12, 53
			PALETTE 13, 15 + 32
			PALETTE 14, 38
			PALETTE 15, 15 + 48
		CASE pal.party
			SELECT CASE partystyle
				CASE ps.brightbgr: PALETTE 0, (levelpal + 8) MOD 64
				CASE ps.whitebgr: PALETTE 0, 63
				CASE ps.snowing: PALETTE 0, levelpal
			END SELECT
	END SELECT
END SUB

FUNCTION SHIFTBAG (num, dir)
	IF dir = 0 THEN SHIFTBAG = FALSE: EXIT FUNCTION
	GETMAZECELL bag(num).x, bag(num).y, bx, by: IF bx = 0 OR bx = mazex - 1 THEN SHIFTBAG = FALSE: EXIT FUNCTION
	IF BOXCOLL(bag(num).x + dir, bag(num).y, cellw, cellh, digger.x, digger.y, imgw, imgh) THEN SHIFTBAG = FALSE: EXIT FUNCTION
	FOR i = 1 TO bagc
		IF i <> num THEN
			IF BOXCOLL(bag(num).x + dir, bag(num).y, cellw, cellh, bag(i).x, bag(i).y, cellw - 1, imgh) AND bag(i).mode = bagm.normal AND bag(num).x * SGN(dir) < bag(i).x * SGN(dir) THEN
				IF SHIFTBAG(i, dir) = FALSE THEN SHIFTBAG = FALSE: EXIT FUNCTION
			END IF
		END IF
	NEXT

	SHIFTBAG = TRUE
	GETMAZECELL bag(num).x, bag(num).y, cx, cy
	FILLMAZECELL cx, cy, FALSE, OLD, OLD, OLD, OLD
	IF dir < 0 THEN
		bag(num).mode = bagm.left
		bag(num).pic.sequence = ani.bagleft
		GETCELLCOORDS bx, by, x, y
		IF x = bag(num).x AND y = bag(num).y THEN d = 1 ELSE d = 0
		GETCELLCOORDS bx - d, by, bag(num).dx, 0
	ELSE
		bag(num).mode = bagm.right
		bag(num).pic.sequence = ani.bagright
		GETCELLCOORDS bx + 1, by, bag(num).dx, 0
	END IF
END FUNCTION

SUB SHOOT (dx, dy)
	IF eye.use THEN EXIT SUB
	eye.x = digger.x - 5 * (dx = 0 AND dy < 0) - imgw * (dx > 0) + eyew * (dx < 0)
	eye.y = digger.y - 2 * (dy = 0) - imgh * (dy > 0) + eyeh * (dy < 0)
	eye.dx = dx
	eye.dy = dy
	eye.use = TRUE
	eye.mode = eyem.normal
	eye.pic.sequence = ani.fire
	eye.pic.frame = 0
	PLAYSOUND snd.shoot
END SUB

SUB SHOWHINT (col, row, a$)
CONST charw = 9, charh = 14
CONST cl0 = 9, cl1 = 14, cl2 = 13, cl3 = 7
	cl = cl0
	x = col
	FOR i = 1 TO LEN(a$)
		COLOR cl
		SELECT CASE MID$(a$, i, 1)
			CASE "*": TEXTOUT row, x, CHR$(4), 1: x = x + 1
			CASE "\": IF cl = cl0 THEN cl = cl1 ELSE cl = cl0
			CASE "~": IF cl = cl0 THEN cl = cl2 ELSE cl = cl0
			CASE "^": IF cl = cl0 THEN cl = cl3 ELSE cl = cl0
			CASE "&":
				SELECT CASE MID$(a$, i + 1, 1)
					CASE "e": im = 65: dx = 6: dy = 0: f = 1
					CASE "g": im = 73: dy = -1: dx = 6
					CASE "c": im = 72: dx = 6: dy = -1
					CASE "n": im = 49: dx = 5: dy = -1
					CASE "h": im = 57: dy = -2
					CASE "s": im = 73: f = 1:  dx = 9: dy = 3
				END SELECT
				IF f = 0 THEN
					x = x + 1
				ELSE
					x = x + 1
					f = 0
				END IF
				DRAWIMG charw * (x - 3) + dx, (row - 1) * charh + dy, im, TRUE
				i = i + 1
			CASE ELSE: TEXTOUT row, x, MID$(a$, i, 1), 1: x = x + 1
		END SELECT
	NEXT
END SUB

SUB SHOWHINTS
	VIEW
	LINE (0, 0)-(640, 350), 8, BF
	col = 2: ctl = 40
	SHOWHINT 2, 17, "Welcome to ~" + PROGNAME$ + "~! The scoring system works as follows:"
	SHOWHINT col, 19, " Decoration (&e) costs \25\ points;  pick  up  eight  of  them, and  you"
	SHOWHINT col, 20, "will  get extra \250\ points.  Gifts  and  sweets (&g)  cost \500\ points."
	SHOWHINT col, 21, "Neutralization of dangerous Hobbins and Nobbins ( &h and &n) gives  you"
	SHOWHINT col, 22, "\250\ points.  If you go to  the New Year Party (&c), your wishes become"
	SHOWHINT col, 23, "true,   and  you  receive  \1000\  extra  points.  Extra  life  appears"
	SHOWHINT col, 24, "every \5,000\ points."
	SHOWHINT 60, 25, "~2002-2008~"
	SHOWHINT ctl, 1, "use  ^arrow keys^  to move, ^space^"
	SHOWHINT ctl, 2, "to  shoot,  ^F1^ to pause,  ^F5^ to"
	SHOWHINT ctl, 3, "restart, ^F4^ to save screenshot,"
	SHOWHINT ctl, 4, "^F8^ to toggle sound. ^F10^ quits."
	VIEW (f.x, f.y)-(f.x + f.w - 1, f.y + f.h - 1), 0, 14
	RESTOREFIELD
END SUB

SUB SHOWHISCORES
CONST scores.y = 8
CONST scores.x = 42
CONST linestyle = &HFFFF
	VIEW
	COLOR 15: TEXTOUT scores.y - 2, scores.x + 2, "H I G H  S C O R E S", 1
	LINE ((scores.x - 1) * 9 - 3, (scores.y - 1) * 14 - 8)-STEP((namelen + 1 + 9) * 9 + 4, 0), 9, , linestyle
	LINE ((scores.x + 1) * 9 + 1, (scores.y - 1) * 14 - 8)-STEP(0, (scores.y) * 14), 9, , linestyle
	LINE ((scores.x - 1) * 9 - 3, (scores.y + hiscorec) * 14 - 8)-STEP((namelen + 1 + 9) * 9 + 4, 0), 9, , linestyle
	FOR i = 0 TO hiscorec - 1
		COLOR 13 + (i <> 0)
		TEXTOUT scores.y + i, scores.x, NUMTOSTR$(i + 1) + ".", -2
		
		fl = 0
		FOR j = 1 TO namelen
			IF INSTR(CHR$(0), MID$(hiscore(i).uname, j, 1)) <> 0 THEN MID$(hiscore(i).uname, j, 1) = " " ELSE fl = 1
		NEXT
		IF fl = 0 THEN hiscore(i).uname = "... free place"

		COLOR 7: TEXTOUT scores.y + i, scores.x + 3, hiscore(i).uname, -2

		a$ = NUMTOSTR$(hiscore(i).score)
		a$ = STRING$(6 - LEN(a$), " ") + a$
		COLOR 11: TEXTOUT scores.y + i, scores.x + namelen + 4, a$, -2
	NEXT
	RESTOREFIELD
END SUB

SUB SHOWSCORE (score AS LONG, lives AS INTEGER)
DIM ind(1 TO 8) AS INTEGER
DIM im(0 TO 10, 0 TO 2) AS INTEGER
 
	a$ = LTRIM$(RTRIM$(STR$(score)))
	a$ = STRING$(7 - LEN(a$), "0") + a$
	FOR i = 1 TO LEN(a$)
		ind(i) = ASC(MID$(a$, i, 1)) - ASC("0") + img0
	NEXT
	indc = LEN(a$)

	FOR i = 0 TO 10
		GETIMAGE anim(ani.stat, img1) + i, im(i, 1), im(i, 2), im(i, 0)
	NEXT

	VIEW (0, 0)-(f.w + f.x, 14)
	x = f.x
	FOR i = 1 TO indc
		PUT (x, 0), graph(im(ind(i), 0)), PSET
		x = x + im(ind(i), 1) + 3
	NEXT
	VIEW (7 * 15 + f.x + 2, 0)-(7 * 15 + f.x + 2 + f.w, 14)
	GETIMAGE anim(ani.stat, img1) + 10, w, 0, idx
	FOR i = 0 TO lives - 1
		PUT (i * (w + 5), 1), graph(idx), PSET
	NEXT
	LINE (lives * (w + 5), 1)-STEP(w * 2, 14), 8, BF
	RESTOREFIELD
END SUB

FUNCTION TEVENT (t AS TIMEINT)
DIM tmr AS SINGLE
	tmr = TIMER
	IF tmr >= t.starttime + t.interval OR ABS(tmr - t.starttime) > 10000 THEN
		t.starttime = TIMER
		TEVENT = TRUE
	ELSE
		TEVENT = FALSE
	END IF
END FUNCTION

SUB TEXTOUT (row, col, text$, sp)
	'sp = -2
	y = (row - 1) * 14
	IF sp < 0 THEN Bg = 1: sp = -sp - 1 ELSE Bg = 0
	x = (col - 1) * (8 + sp)
	FOR i = 1 TO LEN(text$)
		idx = ASC(MID$(text$, i, 1))
		FOR j = 0 TO 15
			ch = ASC(font(idx, j))
			FOR K = 0 TO 7
				c = ch AND (2 ^ K)
				IF c <> 0 THEN
					PSET (x + 7 - K + (i - 1) * (8 + sp), y + j)
				ELSE
					IF Bg THEN PSET (x + 7 - K + (i - 1) * (8 + sp), y + j), 8
				END IF
			NEXT
		NEXT
	NEXT
END SUB

SUB UPDATESCORES
	OPEN hiscorefile$ FOR BINARY ACCESS WRITE AS #1
	SEEK #1, 1
	FOR i = 0 TO hiscorec - 1
		PUT #1, , hiscore(i)
	NEXT
	CLOSE #1
	LOADSCORES hiscorefile, hiscore()
END SUB

